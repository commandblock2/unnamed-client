diff --git a/mcp918.iml b/mcp918.iml
index 20cf5d5..015bfb7 100644
--- a/mcp918.iml
+++ b/mcp918.iml
@@ -18,6 +18,7 @@
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src/embeddedlibs" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/minecraft" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/unnamed-client" isTestSource="false" />
     </content>
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" name="libraryjavasound-20101123" level="project" />
diff --git a/src/embeddedlibs/org/lwjglx/input/Keyboard.java b/src/embeddedlibs/org/lwjglx/input/Keyboard.java
index 3d9b9b3..fd3bca3 100644
--- a/src/embeddedlibs/org/lwjglx/input/Keyboard.java
+++ b/src/embeddedlibs/org/lwjglx/input/Keyboard.java
@@ -11,281 +11,286 @@ import org.lwjglx.Sys;
 import org.lwjglx.opengl.Display;
 
 public class Keyboard {
-	
-	/**
-	 * The special character meaning that no
-	 * character was translated for the event.
-	 */
-	public static final int CHAR_NONE          = '\0';
-
-	/**
-	 * The special keycode meaning that only the
-	 * translated character is valid.
-	 */
-	public static final int KEY_NONE            = 0x00;
-
-	public static final int KEY_ESCAPE          = 0x01;
-	public static final int KEY_1               = 0x02;
-	public static final int KEY_2               = 0x03;
-	public static final int KEY_3               = 0x04;
-	public static final int KEY_4               = 0x05;
-	public static final int KEY_5               = 0x06;
-	public static final int KEY_6               = 0x07;
-	public static final int KEY_7               = 0x08;
-	public static final int KEY_8               = 0x09;
-	public static final int KEY_9               = 0x0A;
-	public static final int KEY_0               = 0x0B;
-	public static final int KEY_MINUS           = 0x0C; /* - on main keyboard */
-	public static final int KEY_EQUALS          = 0x0D;
-	public static final int KEY_BACK            = 0x0E; /* backspace */
-	public static final int KEY_TAB             = 0x0F;
-	public static final int KEY_Q               = 0x10;
-	public static final int KEY_W               = 0x11;
-	public static final int KEY_E               = 0x12;
-	public static final int KEY_R               = 0x13;
-	public static final int KEY_T               = 0x14;
-	public static final int KEY_Y               = 0x15;
-	public static final int KEY_U               = 0x16;
-	public static final int KEY_I               = 0x17;
-	public static final int KEY_O               = 0x18;
-	public static final int KEY_P               = 0x19;
-	public static final int KEY_LBRACKET        = 0x1A;
-	public static final int KEY_RBRACKET        = 0x1B;
-	public static final int KEY_RETURN          = 0x1C; /* Enter on main keyboard */
-	public static final int KEY_LCONTROL        = 0x1D;
-	public static final int KEY_A               = 0x1E;
-	public static final int KEY_S               = 0x1F;
-	public static final int KEY_D               = 0x20;
-	public static final int KEY_F               = 0x21;
-	public static final int KEY_G               = 0x22;
-	public static final int KEY_H               = 0x23;
-	public static final int KEY_J               = 0x24;
-	public static final int KEY_K               = 0x25;
-	public static final int KEY_L               = 0x26;
-	public static final int KEY_SEMICOLON       = 0x27;
-	public static final int KEY_APOSTROPHE      = 0x28;
-	public static final int KEY_GRAVE           = 0x29; /* accent grave */
-	public static final int KEY_LSHIFT          = 0x2A;
-	public static final int KEY_BACKSLASH       = 0x2B;
-	public static final int KEY_Z               = 0x2C;
-	public static final int KEY_X               = 0x2D;
-	public static final int KEY_C               = 0x2E;
-	public static final int KEY_V               = 0x2F;
-	public static final int KEY_B               = 0x30;
-	public static final int KEY_N               = 0x31;
-	public static final int KEY_M               = 0x32;
-	public static final int KEY_COMMA           = 0x33;
-	public static final int KEY_PERIOD          = 0x34; /* . on main keyboard */
-	public static final int KEY_SLASH           = 0x35; /* / on main keyboard */
-	public static final int KEY_RSHIFT          = 0x36;
-	public static final int KEY_MULTIPLY        = 0x37; /* * on numeric keypad */
-	public static final int KEY_LMENU           = 0x38; /* left Alt */
-	public static final int KEY_SPACE           = 0x39;
-	public static final int KEY_CAPITAL         = 0x3A;
-	public static final int KEY_F1              = 0x3B;
-	public static final int KEY_F2              = 0x3C;
-	public static final int KEY_F3              = 0x3D;
-	public static final int KEY_F4              = 0x3E;
-	public static final int KEY_F5              = 0x3F;
-	public static final int KEY_F6              = 0x40;
-	public static final int KEY_F7              = 0x41;
-	public static final int KEY_F8              = 0x42;
-	public static final int KEY_F9              = 0x43;
-	public static final int KEY_F10             = 0x44;
-	public static final int KEY_NUMLOCK         = 0x45;
-	public static final int KEY_SCROLL          = 0x46; /* Scroll Lock */
-	public static final int KEY_NUMPAD7         = 0x47;
-	public static final int KEY_NUMPAD8         = 0x48;
-	public static final int KEY_NUMPAD9         = 0x49;
-	public static final int KEY_SUBTRACT        = 0x4A; /* - on numeric keypad */
-	public static final int KEY_NUMPAD4         = 0x4B;
-	public static final int KEY_NUMPAD5         = 0x4C;
-	public static final int KEY_NUMPAD6         = 0x4D;
-	public static final int KEY_ADD             = 0x4E; /* + on numeric keypad */
-	public static final int KEY_NUMPAD1         = 0x4F;
-	public static final int KEY_NUMPAD2         = 0x50;
-	public static final int KEY_NUMPAD3         = 0x51;
-	public static final int KEY_NUMPAD0         = 0x52;
-	public static final int KEY_DECIMAL         = 0x53; /* . on numeric keypad */
-	public static final int KEY_F11             = 0x57;
-	public static final int KEY_F12             = 0x58;
-	public static final int KEY_F13             = 0x64; /*                     (NEC PC98) */
-	public static final int KEY_F14             = 0x65; /*                     (NEC PC98) */
-	public static final int KEY_F15             = 0x66; /*                     (NEC PC98) */
-	public static final int KEY_F16             = 0x67; /* Extended Function keys - (Mac) */
-	public static final int KEY_F17             = 0x68;
-	public static final int KEY_F18             = 0x69;
-	public static final int KEY_KANA            = 0x70; /* (Japanese keyboard)            */
-	public static final int KEY_F19             = 0x71; /* Extended Function keys - (Mac) */
-	public static final int KEY_CONVERT         = 0x79; /* (Japanese keyboard)            */
-	public static final int KEY_NOCONVERT       = 0x7B; /* (Japanese keyboard)            */
-	public static final int KEY_YEN             = 0x7D; /* (Japanese keyboard)            */
-	public static final int KEY_NUMPADEQUALS    = 0x8D; /* = on numeric keypad (NEC PC98) */
-	public static final int KEY_CIRCUMFLEX      = 0x90; /* (Japanese keyboard)            */
-	public static final int KEY_AT              = 0x91; /*                     (NEC PC98) */
-	public static final int KEY_COLON           = 0x92; /*                     (NEC PC98) */
-	public static final int KEY_UNDERLINE       = 0x93; /*                     (NEC PC98) */
-	public static final int KEY_KANJI           = 0x94; /* (Japanese keyboard)            */
-	public static final int KEY_STOP            = 0x95; /*                     (NEC PC98) */
-	public static final int KEY_AX              = 0x96; /*                     (Japan AX) */
-	public static final int KEY_UNLABELED       = 0x97; /*                        (J3100) */
-	public static final int KEY_NUMPADENTER     = 0x9C; /* Enter on numeric keypad */
-	public static final int KEY_RCONTROL        = 0x9D;
-	public static final int KEY_SECTION         = 0xA7; /* Section symbol (Mac) */
-	public static final int KEY_NUMPADCOMMA     = 0xB3; /* , on numeric keypad (NEC PC98) */
-	public static final int KEY_DIVIDE          = 0xB5; /* / on numeric keypad */
-	public static final int KEY_SYSRQ           = 0xB7;
-	public static final int KEY_RMENU           = 0xB8; /* right Alt */
-	public static final int KEY_FUNCTION        = 0xC4; /* Function (Mac) */
-	public static final int KEY_PAUSE           = 0xC5; /* Pause */
-	public static final int KEY_HOME            = 0xC7; /* Home on arrow keypad */
-	public static final int KEY_UP              = 0xC8; /* UpArrow on arrow keypad */
-	public static final int KEY_PRIOR           = 0xC9; /* PgUp on arrow keypad */
-	public static final int KEY_LEFT            = 0xCB; /* LeftArrow on arrow keypad */
-	public static final int KEY_RIGHT           = 0xCD; /* RightArrow on arrow keypad */
-	public static final int KEY_END             = 0xCF; /* End on arrow keypad */
-	public static final int KEY_DOWN            = 0xD0; /* DownArrow on arrow keypad */
-	public static final int KEY_NEXT            = 0xD1; /* PgDn on arrow keypad */
-	public static final int KEY_INSERT          = 0xD2; /* Insert on arrow keypad */
-	public static final int KEY_DELETE          = 0xD3; /* Delete on arrow keypad */
-	public static final int KEY_CLEAR           = 0xDA; /* Clear key (Mac) */
-	public static final int KEY_LMETA           = 0xDB; /* Left Windows/Option key */
-	public static final int KEY_LWIN            = KEY_LMETA; /* Left Windows key */
-	public static final int KEY_RMETA            = 0xDC; /* Right Windows/Option key */
-	public static final int KEY_RWIN            = KEY_RMETA; /* Right Windows key */
-	public static final int KEY_APPS            = 0xDD; /* AppMenu key */
-	public static final int KEY_POWER           = 0xDE;
-	public static final int KEY_SLEEP           = 0xDF;
-
-	
-	private static EventQueue queue = new EventQueue(4096);
-	//private static int maxEvents = 32;
-	
-	//private static int eventCount = 0;
-	//private static int currentEventPos = -1;
-	//private static int nextEventPos = 0;
-	
-	private static int[] keyEvents = new int[queue.getMaxEvents()];
-	private static boolean[] keyEventStates = new boolean[queue.getMaxEvents()];
-	private static long[] nanoTimeEvents = new long[queue.getMaxEvents()];
-	private static char[] keyEventChars = new char[256];
-	
-	public static final int KEYBOARD_SIZE = 256;
-	
-	private static final String[] keyName = new String[KEYBOARD_SIZE];
-	private static final Map<String, Integer> keyMap = new HashMap<String, Integer>(253);
-	
-	static {
-		// Use reflection to find out key names
-		Field[] fields = Keyboard.class.getFields();
-		try {
-			for ( Field field : fields ) {
-				if ( Modifier.isStatic(field.getModifiers())
-				     && Modifier.isPublic(field.getModifiers())
-				     && Modifier.isFinal(field.getModifiers())
-				     && field.getType().equals(int.class)
-				     && field.getName().startsWith("KEY_")
-				     && !field.getName().endsWith("WIN") ) { /* Don't use deprecated names */
-
-					int key = field.getInt(null);
-					String name = field.getName().substring(4);
-					keyName[key] = name;
-					keyMap.put(name, key);
-				}
-
-			}
-		} catch (Exception e) {
-		}
-
-	}
-	
-	public static void addKeyEvent(int key, boolean pressed) {
-		//eventCount++;
-		//if (eventCount > maxEvents) eventCount = maxEvents;
-		
-		keyEvents[queue.getNextPos()] = KeyCodes.toLwjglKey(key);
-		keyEventStates[queue.getNextPos()] = pressed;
-		
-		nanoTimeEvents[queue.getNextPos()] = Sys.getNanoTime();
-		
-		queue.add();
+
+    /**
+     * The special character meaning that no
+     * character was translated for the event.
+     */
+    public static final int CHAR_NONE = '\0';
+
+    /**
+     * The special keycode meaning that only the
+     * translated character is valid.
+     */
+    public static final int KEY_NONE = 0x00;
+
+    public static final int KEY_ESCAPE = 0x01;
+    public static final int KEY_1 = 0x02;
+    public static final int KEY_2 = 0x03;
+    public static final int KEY_3 = 0x04;
+    public static final int KEY_4 = 0x05;
+    public static final int KEY_5 = 0x06;
+    public static final int KEY_6 = 0x07;
+    public static final int KEY_7 = 0x08;
+    public static final int KEY_8 = 0x09;
+    public static final int KEY_9 = 0x0A;
+    public static final int KEY_0 = 0x0B;
+    public static final int KEY_MINUS = 0x0C; /* - on main keyboard */
+    public static final int KEY_EQUALS = 0x0D;
+    public static final int KEY_BACK = 0x0E; /* backspace */
+    public static final int KEY_TAB = 0x0F;
+    public static final int KEY_Q = 0x10;
+    public static final int KEY_W = 0x11;
+    public static final int KEY_E = 0x12;
+    public static final int KEY_R = 0x13;
+    public static final int KEY_T = 0x14;
+    public static final int KEY_Y = 0x15;
+    public static final int KEY_U = 0x16;
+    public static final int KEY_I = 0x17;
+    public static final int KEY_O = 0x18;
+    public static final int KEY_P = 0x19;
+    public static final int KEY_LBRACKET = 0x1A;
+    public static final int KEY_RBRACKET = 0x1B;
+    public static final int KEY_RETURN = 0x1C; /* Enter on main keyboard */
+    public static final int KEY_LCONTROL = 0x1D;
+    public static final int KEY_A = 0x1E;
+    public static final int KEY_S = 0x1F;
+    public static final int KEY_D = 0x20;
+    public static final int KEY_F = 0x21;
+    public static final int KEY_G = 0x22;
+    public static final int KEY_H = 0x23;
+    public static final int KEY_J = 0x24;
+    public static final int KEY_K = 0x25;
+    public static final int KEY_L = 0x26;
+    public static final int KEY_SEMICOLON = 0x27;
+    public static final int KEY_APOSTROPHE = 0x28;
+    public static final int KEY_GRAVE = 0x29; /* accent grave */
+    public static final int KEY_LSHIFT = 0x2A;
+    public static final int KEY_BACKSLASH = 0x2B;
+    public static final int KEY_Z = 0x2C;
+    public static final int KEY_X = 0x2D;
+    public static final int KEY_C = 0x2E;
+    public static final int KEY_V = 0x2F;
+    public static final int KEY_B = 0x30;
+    public static final int KEY_N = 0x31;
+    public static final int KEY_M = 0x32;
+    public static final int KEY_COMMA = 0x33;
+    public static final int KEY_PERIOD = 0x34; /* . on main keyboard */
+    public static final int KEY_SLASH = 0x35; /* / on main keyboard */
+    public static final int KEY_RSHIFT = 0x36;
+    public static final int KEY_MULTIPLY = 0x37; /* * on numeric keypad */
+    public static final int KEY_LMENU = 0x38; /* left Alt */
+    public static final int KEY_SPACE = 0x39;
+    public static final int KEY_CAPITAL = 0x3A;
+    public static final int KEY_F1 = 0x3B;
+    public static final int KEY_F2 = 0x3C;
+    public static final int KEY_F3 = 0x3D;
+    public static final int KEY_F4 = 0x3E;
+    public static final int KEY_F5 = 0x3F;
+    public static final int KEY_F6 = 0x40;
+    public static final int KEY_F7 = 0x41;
+    public static final int KEY_F8 = 0x42;
+    public static final int KEY_F9 = 0x43;
+    public static final int KEY_F10 = 0x44;
+    public static final int KEY_NUMLOCK = 0x45;
+    public static final int KEY_SCROLL = 0x46; /* Scroll Lock */
+    public static final int KEY_NUMPAD7 = 0x47;
+    public static final int KEY_NUMPAD8 = 0x48;
+    public static final int KEY_NUMPAD9 = 0x49;
+    public static final int KEY_SUBTRACT = 0x4A; /* - on numeric keypad */
+    public static final int KEY_NUMPAD4 = 0x4B;
+    public static final int KEY_NUMPAD5 = 0x4C;
+    public static final int KEY_NUMPAD6 = 0x4D;
+    public static final int KEY_ADD = 0x4E; /* + on numeric keypad */
+    public static final int KEY_NUMPAD1 = 0x4F;
+    public static final int KEY_NUMPAD2 = 0x50;
+    public static final int KEY_NUMPAD3 = 0x51;
+    public static final int KEY_NUMPAD0 = 0x52;
+    public static final int KEY_DECIMAL = 0x53; /* . on numeric keypad */
+    public static final int KEY_F11 = 0x57;
+    public static final int KEY_F12 = 0x58;
+    public static final int KEY_F13 = 0x64; /*                     (NEC PC98) */
+    public static final int KEY_F14 = 0x65; /*                     (NEC PC98) */
+    public static final int KEY_F15 = 0x66; /*                     (NEC PC98) */
+    public static final int KEY_F16 = 0x67; /* Extended Function keys - (Mac) */
+    public static final int KEY_F17 = 0x68;
+    public static final int KEY_F18 = 0x69;
+    public static final int KEY_KANA = 0x70; /* (Japanese keyboard)            */
+    public static final int KEY_F19 = 0x71; /* Extended Function keys - (Mac) */
+    public static final int KEY_CONVERT = 0x79; /* (Japanese keyboard)            */
+    public static final int KEY_NOCONVERT = 0x7B; /* (Japanese keyboard)            */
+    public static final int KEY_YEN = 0x7D; /* (Japanese keyboard)            */
+    public static final int KEY_NUMPADEQUALS = 0x8D; /* = on numeric keypad (NEC PC98) */
+    public static final int KEY_CIRCUMFLEX = 0x90; /* (Japanese keyboard)            */
+    public static final int KEY_AT = 0x91; /*                     (NEC PC98) */
+    public static final int KEY_COLON = 0x92; /*                     (NEC PC98) */
+    public static final int KEY_UNDERLINE = 0x93; /*                     (NEC PC98) */
+    public static final int KEY_KANJI = 0x94; /* (Japanese keyboard)            */
+    public static final int KEY_STOP = 0x95; /*                     (NEC PC98) */
+    public static final int KEY_AX = 0x96; /*                     (Japan AX) */
+    public static final int KEY_UNLABELED = 0x97; /*                        (J3100) */
+    public static final int KEY_NUMPADENTER = 0x9C; /* Enter on numeric keypad */
+    public static final int KEY_RCONTROL = 0x9D;
+    public static final int KEY_SECTION = 0xA7; /* Section symbol (Mac) */
+    public static final int KEY_NUMPADCOMMA = 0xB3; /* , on numeric keypad (NEC PC98) */
+    public static final int KEY_DIVIDE = 0xB5; /* / on numeric keypad */
+    public static final int KEY_SYSRQ = 0xB7;
+    public static final int KEY_RMENU = 0xB8; /* right Alt */
+    public static final int KEY_FUNCTION = 0xC4; /* Function (Mac) */
+    public static final int KEY_PAUSE = 0xC5; /* Pause */
+    public static final int KEY_HOME = 0xC7; /* Home on arrow keypad */
+    public static final int KEY_UP = 0xC8; /* UpArrow on arrow keypad */
+    public static final int KEY_PRIOR = 0xC9; /* PgUp on arrow keypad */
+    public static final int KEY_LEFT = 0xCB; /* LeftArrow on arrow keypad */
+    public static final int KEY_RIGHT = 0xCD; /* RightArrow on arrow keypad */
+    public static final int KEY_END = 0xCF; /* End on arrow keypad */
+    public static final int KEY_DOWN = 0xD0; /* DownArrow on arrow keypad */
+    public static final int KEY_NEXT = 0xD1; /* PgDn on arrow keypad */
+    public static final int KEY_INSERT = 0xD2; /* Insert on arrow keypad */
+    public static final int KEY_DELETE = 0xD3; /* Delete on arrow keypad */
+    public static final int KEY_CLEAR = 0xDA; /* Clear key (Mac) */
+    public static final int KEY_LMETA = 0xDB; /* Left Windows/Option key */
+    public static final int KEY_LWIN = KEY_LMETA; /* Left Windows key */
+    public static final int KEY_RMETA = 0xDC; /* Right Windows/Option key */
+    public static final int KEY_RWIN = KEY_RMETA; /* Right Windows key */
+    public static final int KEY_APPS = 0xDD; /* AppMenu key */
+    public static final int KEY_POWER = 0xDE;
+    public static final int KEY_SLEEP = 0xDF;
+
+
+    private static EventQueue queue = new EventQueue(4096);
+    //private static int maxEvents = 32;
+
+    //private static int eventCount = 0;
+    //private static int currentEventPos = -1;
+    //private static int nextEventPos = 0;
+
+    private static boolean repeat_enabled;
+
+    private static int[] keyEvents = new int[queue.getMaxEvents()];
+    private static boolean[] keyEventStates = new boolean[queue.getMaxEvents()];
+    private static boolean[] keyEventRepeat = new boolean[queue.getMaxEvents()];
+    private static long[] nanoTimeEvents = new long[queue.getMaxEvents()];
+    private static char[] keyEventChars = new char[256];
+
+
+    public static final int KEYBOARD_SIZE = 256;
+
+    private static final String[] keyName = new String[KEYBOARD_SIZE];
+    private static final Map<String, Integer> keyMap = new HashMap<String, Integer>(253);
+
+    static {
+        // Use reflection to find out key names
+        Field[] fields = Keyboard.class.getFields();
+        try {
+            for (Field field : fields) {
+                if (Modifier.isStatic(field.getModifiers())
+                        && Modifier.isPublic(field.getModifiers())
+                        && Modifier.isFinal(field.getModifiers())
+                        && field.getType().equals(int.class)
+                        && field.getName().startsWith("KEY_")
+                        && !field.getName().endsWith("WIN")) { /* Don't use deprecated names */
+
+                    int key = field.getInt(null);
+                    String name = field.getName().substring(4);
+                    keyName[key] = name;
+                    keyMap.put(name, key);
+                }
+
+            }
+        } catch (Exception e) {
+        }
+
+    }
+
+    public static void addKeyEvent(int key, int pressed) {
+        //eventCount++;
+        //if (eventCount > maxEvents) eventCount = maxEvents;
+
+        keyEvents[queue.getNextPos()] = KeyCodes.toLwjglKey(key);
+        keyEventStates[queue.getNextPos()] = pressed == GLFW.GLFW_PRESS;
+        if (repeat_enabled)
+            keyEventRepeat[queue.getNextPos()] = pressed == GLFW.GLFW_REPEAT;
+
+        nanoTimeEvents[queue.getNextPos()] = Sys.getNanoTime();
+
+        queue.add();
 		/*nextEventPos++;
 		if (nextEventPos == maxEvents) nextEventPos = 0;
-		
+
 		if (currentEventPos == nextEventPos) currentEventPos++;
 		if (currentEventPos == maxEvents) currentEventPos = 0;*/
-	}
-	
-	public static void addCharEvent(int key, char c) {
-		int index = KeyCodes.toLwjglKey(key);
-		keyEventChars[index] = c;
-	}
-	
-	public static void create() throws LWJGLException {
-		
-	}
-            
-	public static boolean isKeyDown(int key) {
-		return GLFW.glfwGetKey(Display.getWindow(), KeyCodes.toGlfwKey(key)) == GLFW.GLFW_PRESS;
-	}
-	
-	public static void poll() {
-		// TODO
-	}
-	
-	public static void enableRepeatEvents(boolean enable) {
-
-	}
-	
-	public static boolean isRepeatEvent() {
-		// TODO
-		return false;
-	}
-	
-	public static boolean next() {
-		return queue.next();
+    }
+
+    public static void addCharEvent(int key, char c) {
+        int index = KeyCodes.toLwjglKey(key);
+        keyEventChars[index] = c;
+    }
+
+    public static void create() throws LWJGLException {
+
+    }
+
+    public static boolean isKeyDown(int key) {
+        return GLFW.glfwGetKey(Display.getWindow(), KeyCodes.toGlfwKey(key)) == GLFW.GLFW_PRESS;
+    }
+
+    public static void poll() {
+        // TODO
+    }
+
+    public static void enableRepeatEvents(boolean enable) {
+        repeat_enabled = enable;
+    }
+
+    public static boolean isRepeatEvent() {
+        return keyEventRepeat[queue.getCurrentPos()];
+    }
+
+    public static boolean next() {
+        return queue.next();
 		/*if (eventCount == 0) return false;
-		
+
 		eventCount--;
 		currentEventPos++;
 		if (currentEventPos == maxEvents) currentEventPos = 0;
-		
+
 		return true;*/
-	}
-	
-	public static int getEventKey() {
-		return keyEvents[queue.getCurrentPos()];
-	}
-	
-	public static char getEventCharacter() {
-		return keyEventChars[getEventKey()];
-	}
-	
-	public static boolean getEventKeyState() {
-		return keyEventStates[queue.getCurrentPos()];
-	}
-	
-	public static long getEventNanoseconds() {
-		return nanoTimeEvents[queue.getCurrentPos()];
-	}
-	
-	public static String getKeyName(int key) {
-		return keyName[key];
-	}
-	
-	public static int getKeyIndex(java.lang.String keyName) {
-		Integer ret = keyMap.get(keyName);
-		if (ret == null)
-			return KEY_NONE;
-		else
-			return ret;
-	}
-	
-	public static boolean isCreated() {
-		return Display.isCreated();
-	}
-	
-	public static void destroy() {
-		
-	}
+    }
+
+    public static int getEventKey() {
+        return keyEvents[queue.getCurrentPos()];
+    }
+
+    public static char getEventCharacter() {
+        return keyEventChars[getEventKey()];
+    }
+
+    public static boolean getEventKeyState() {
+        return keyEventStates[queue.getCurrentPos()];
+    }
+
+    public static long getEventNanoseconds() {
+        return nanoTimeEvents[queue.getCurrentPos()];
+    }
+
+    public static String getKeyName(int key) {
+        return keyName[key];
+    }
+
+    public static int getKeyIndex(java.lang.String keyName) {
+        Integer ret = keyMap.get(keyName);
+        if (ret == null)
+            return KEY_NONE;
+        else
+            return ret;
+    }
+
+    public static boolean isCreated() {
+        return Display.isCreated();
+    }
+
+    public static void destroy() {
+
+    }
 }
diff --git a/src/embeddedlibs/org/lwjglx/input/Mouse.java b/src/embeddedlibs/org/lwjglx/input/Mouse.java
index 1515210..ce48e8c 100644
--- a/src/embeddedlibs/org/lwjglx/input/Mouse.java
+++ b/src/embeddedlibs/org/lwjglx/input/Mouse.java
@@ -38,6 +38,7 @@ public class Mouse {
 
 
     public static void addMoveEvent(double mouseX, double mouseY) {
+
         latestX = (int) mouseX;
         latestY = Display.getHeight() - (int) mouseY;
 
@@ -189,6 +190,7 @@ public class Mouse {
     }
 
     public static void setCursorPosition(int new_x, int new_y) {
+        GLFW.glfwSetInputMode(Display.getWindow(), GLFW.GLFW_CURSOR, GLFW.GLFW_CURSOR_NORMAL);
         GLFW.glfwSetCursorPos(Display.getWindow(), new_x, new_y);
     }
 
diff --git a/src/embeddedlibs/org/lwjglx/opengl/Display.java b/src/embeddedlibs/org/lwjglx/opengl/Display.java
index c1f91b4..6d05310 100644
--- a/src/embeddedlibs/org/lwjglx/opengl/Display.java
+++ b/src/embeddedlibs/org/lwjglx/opengl/Display.java
@@ -117,7 +117,7 @@ public class Display {
                 latestEventKey = key;
 
                 if (action == GLFW_RELEASE || action == GLFW.GLFW_PRESS) {
-                    Keyboard.addKeyEvent(key, action == GLFW.GLFW_PRESS ? true : false);
+                    Keyboard.addKeyEvent(key, action);
                 }
             }
         };
diff --git a/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java b/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
index 0d2775b..665e02d 100644
--- a/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
+++ b/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
@@ -49,6 +49,8 @@ import net.minecraft.world.WorldProvider;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.unnamed.Unnamed;
+import net.unnamed.event.EventBus;
+import net.unnamed.event.vanilla.Render3DEvent;
 import net.unnamed.modules.render.AntiBlind;
 import net.unnamed.modules.render.NoHurtVibration;
 import optifine.*;
@@ -1885,6 +1887,9 @@ public class EntityRenderer implements IResourceManagerReloadListener
         this.mc.mcProfiler.endStartSection("hand");
         boolean flag2 = ReflectorForge.renderFirstPersonHand(this.mc.renderGlobal, partialTicks, pass);
 
+
+        EventBus.fireEventJ(new Render3DEvent(partialTicks));
+        // thank you LiquidBounce, I'll make this project AGPL-v3.0
         if (!flag2 && this.renderHand && !Shaders.isShadowPass)
         {
             if (flag)
diff --git a/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java b/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
index 7e1f355..34e0e31 100644
--- a/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
+++ b/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
@@ -91,6 +91,7 @@ import net.minecraft.world.WorldProvider;
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.Chunk;
 import net.unnamed.Unnamed;
+import net.unnamed.world.ClientSideWorld;
 import net.unnamed.world.inputcontrol.Cameras;
 import optifine.ChunkUtils;
 import optifine.CloudRenderer;
@@ -785,7 +786,7 @@ public class RenderGlobal implements IWorldAccess, IResourceManagerReloadListene
                                 boolean flag6 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
 
                                 if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag6 || (Unnamed.clientSideWorld().get().cameras().activeCamera().isDefined() && entity == mc.thePlayer))
-                                        && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(new BlockPos(entity2))) && !Unnamed.clientSideWorld().get().isClientSideEntity(entity2))
+                                        && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(new BlockPos(entity2))) && !ClientSideWorld.isClientSideEntity(entity2))
                                 {
 
 
diff --git a/src/minecraft/net/minecraft/client/renderer/entity/Render.java b/src/minecraft/net/minecraft/client/renderer/entity/Render.java
index 58595b2..c7b343e 100644
--- a/src/minecraft/net/minecraft/client/renderer/entity/Render.java
+++ b/src/minecraft/net/minecraft/client/renderer/entity/Render.java
@@ -18,6 +18,8 @@ import net.minecraft.util.BlockPos;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.World;
+import net.unnamed.modules.render.Chams;
+import net.unnamed.utils.target.selector.EntitySelector;
 import optifine.Config;
 
 import org.lwjgl.opengl.GL11;
diff --git a/src/minecraft/net/minecraft/client/renderer/entity/RenderEntity.java b/src/minecraft/net/minecraft/client/renderer/entity/RenderEntity.java
index 7f4ea2c..77fe299 100644
--- a/src/minecraft/net/minecraft/client/renderer/entity/RenderEntity.java
+++ b/src/minecraft/net/minecraft/client/renderer/entity/RenderEntity.java
@@ -3,11 +3,12 @@ package net.minecraft.client.renderer.entity;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.Entity;
 import net.minecraft.util.ResourceLocation;
+import net.unnamed.modules.render.Chams;
+import net.unnamed.utils.target.selector.EntitySelector;
+import org.lwjgl.opengl.GL11;
 
-public class RenderEntity extends Render<Entity>
-{
-    public RenderEntity(RenderManager renderManagerIn)
-    {
+public class RenderEntity extends Render<Entity> {
+    public RenderEntity(RenderManager renderManagerIn) {
         super(renderManagerIn);
     }
 
@@ -17,8 +18,9 @@ public class RenderEntity extends Render<Entity>
      * (Render<T extends Entity>) and this method has signature public void doRender(T entity, double d, double d1,
      * double d2, float f, float f1). But JAD is pre 1.5 so doe
      */
-    public void doRender(Entity entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
+    public void doRender(Entity entity, double x, double y, double z, float entityYaw, float partialTicks) {
+
+
         GlStateManager.pushMatrix();
         renderOffsetAABB(entity.getEntityBoundingBox(), x - entity.lastTickPosX, y - entity.lastTickPosY, z - entity.lastTickPosZ);
         GlStateManager.popMatrix();
@@ -28,8 +30,7 @@ public class RenderEntity extends Render<Entity>
     /**
      * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
      */
-    protected ResourceLocation getEntityTexture(Entity entity)
-    {
+    protected ResourceLocation getEntityTexture(Entity entity) {
         return null;
     }
 }
diff --git a/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java b/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java
index 442cf8d..fb279d1 100644
--- a/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java
+++ b/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java
@@ -101,6 +101,8 @@ import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
+import net.unnamed.event.EventBus;
+import net.unnamed.event.vanilla.RenderEntityEvent;
 import optifine.PlayerItemsLayer;
 import optifine.Reflector;
 
@@ -117,9 +119,9 @@ public class RenderManager
 
     /** Renders fonts */
     private FontRenderer textRenderer;
-    private double renderPosX;
-    private double renderPosY;
-    private double renderPosZ;
+    public double renderPosX;
+    public double renderPosY;
+    public double renderPosZ;
     public TextureManager renderEngine;
 
     /** Reference to the World object. */
@@ -320,6 +322,11 @@ public class RenderManager
 
     public boolean renderEntitySimple(Entity entityIn, float partialTicks)
     {
+        final var event = new RenderEntityEvent(entityIn, partialTicks);
+        EventBus.fireEventJ(event);
+        if (event.isCanceled())
+            return false;
+
         return this.renderEntityStatic(entityIn, partialTicks, false);
     }
 
diff --git a/src/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java b/src/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java
index b6d6f9d..633ffc8 100644
--- a/src/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java
+++ b/src/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.AbstractClientPlayer;
 import net.minecraft.client.entity.EntityPlayerSP;
 import net.minecraft.client.model.ModelPlayer;
@@ -10,7 +11,6 @@ import net.minecraft.client.renderer.entity.layers.LayerCape;
 import net.minecraft.client.renderer.entity.layers.LayerCustomHead;
 import net.minecraft.client.renderer.entity.layers.LayerDeadmau5Head;
 import net.minecraft.client.renderer.entity.layers.LayerHeldItem;
-import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EnumPlayerModelParts;
 import net.minecraft.item.EnumAction;
 import net.minecraft.item.ItemStack;
@@ -56,7 +56,8 @@ public class RenderPlayer extends RendererLivingEntity<AbstractClientPlayer>
     public void doRender(AbstractClientPlayer entity, double x, double y, double z, float entityYaw, float partialTicks)
     {
 
-        if (!entity.isUser() || this.renderManager.livingPlayer == entity || (Unnamed.clientSideWorld().get().cameras().activeCamera().isDefined()))
+        if (!entity.isUser() || this.renderManager.livingPlayer == entity ||
+                (Unnamed.clientSideWorld().get().cameras().shouldRenderThePlayer(partialTicks)))
         {
             double d0 = y;
 
diff --git a/src/minecraft/net/minecraft/client/renderer/entity/RendererLivingEntity.java b/src/minecraft/net/minecraft/client/renderer/entity/RendererLivingEntity.java
index 942073d..c4c497e 100644
--- a/src/minecraft/net/minecraft/client/renderer/entity/RendererLivingEntity.java
+++ b/src/minecraft/net/minecraft/client/renderer/entity/RendererLivingEntity.java
@@ -23,6 +23,8 @@ import net.minecraft.scoreboard.ScorePlayerTeam;
 import net.minecraft.scoreboard.Team;
 import net.minecraft.util.EnumChatFormatting;
 import net.minecraft.util.MathHelper;
+import net.unnamed.modules.render.Chams;
+import net.unnamed.utils.target.selector.EntitySelector;
 import optifine.Config;
 import optifine.Reflector;
 
@@ -99,6 +101,14 @@ public abstract class RendererLivingEntity<T extends EntityLivingBase> extends R
      */
     public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks)
     {
+        boolean doChams = Chams.isOn() && ((EntitySelector)Chams.entitySelector().getValue()).isTarget(entity);
+
+        if (doChams) {
+            GL11.glEnable(GL11.GL_POLYGON_OFFSET_FILL);
+            GL11.glPolygonOffset(1.0F, -1000000F);
+        }
+
+
         if (!Reflector.RenderLivingEvent_Pre_Constructor.exists() || !Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Pre_Constructor, new Object[] {entity, this, Double.valueOf(x), Double.valueOf(y), Double.valueOf(z)}))
         {
             GlStateManager.pushMatrix();
@@ -221,6 +231,11 @@ public abstract class RendererLivingEntity<T extends EntityLivingBase> extends R
                 ;
             }
         }
+
+        if (doChams) {
+            GL11.glPolygonOffset(1.0F, 1000000F);
+            GL11.glDisable(GL11.GL_POLYGON_OFFSET_FILL);
+        }
     }
 
     protected boolean setScoreTeamColor(EntityLivingBase entityLivingBaseIn)
diff --git a/src/minecraft/net/minecraft/entity/Entity.java b/src/minecraft/net/minecraft/entity/Entity.java
index 8cf794b..57ef1da 100644
--- a/src/minecraft/net/minecraft/entity/Entity.java
+++ b/src/minecraft/net/minecraft/entity/Entity.java
@@ -51,7 +51,7 @@ import net.unnamed.event.vanilla.MovementCalculatePreEvent;
 
 public abstract class Entity implements ICommandSender
 {
-    private static final AxisAlignedBB ZERO_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+    public static final AxisAlignedBB ZERO_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
     private static int nextEntityID;
     private int entityId;
     public double renderDistanceWeight;
diff --git a/src/minecraft/net/unnamed/event/unnamed/PlayerMovementCalculatePreEvent.scala b/src/minecraft/net/unnamed/event/unnamed/PlayerMovementCalculatePreEvent.scala
deleted file mode 100644
index bba1db6..0000000
--- a/src/minecraft/net/unnamed/event/unnamed/PlayerMovementCalculatePreEvent.scala
+++ /dev/null
@@ -1,7 +0,0 @@
-package net.unnamed.event.unnamed
-
-import net.unnamed.event.CancelableEvent
-
-case class PlayerMovementCalculatePreEvent(var forward: java.lang.Float,
-                                           var strafe: java.lang.Float,
-                                           var friction: java.lang.Float) extends CancelableEvent
diff --git a/src/minecraft/net/unnamed/event/vanilla/RenderEvent.scala b/src/minecraft/net/unnamed/event/vanilla/RenderEvent.scala
deleted file mode 100644
index e928868..0000000
--- a/src/minecraft/net/unnamed/event/vanilla/RenderEvent.scala
+++ /dev/null
@@ -1,6 +0,0 @@
-package net.unnamed.event.vanilla
-
-import net.unnamed.event.Event
-
-case class Render3DEvent(partialTicks: Float) extends Event
-case class Render2DEvent(partialTicks: Float) extends Event
diff --git a/src/minecraft/net/unnamed/scripting/Contexts.scala b/src/minecraft/net/unnamed/scripting/Contexts.scala
deleted file mode 100644
index 1c19030..0000000
--- a/src/minecraft/net/unnamed/scripting/Contexts.scala
+++ /dev/null
@@ -1,10 +0,0 @@
-package net.unnamed.scripting
-
-import net.unnamed.scripting.context.{REPLContext, ModuleEvalREPLContext}
-
-case object Contexts {
-  var contexts: List[REPLContext] =
-    ModuleEvalREPLContext ::
-      Nil
-
-}
diff --git a/src/minecraft/net/unnamed/scripting/context/ModuleEvalREPLContext.scala b/src/minecraft/net/unnamed/scripting/context/ModuleEvalREPLContext.scala
deleted file mode 100644
index f52e391..0000000
--- a/src/minecraft/net/unnamed/scripting/context/ModuleEvalREPLContext.scala
+++ /dev/null
@@ -1,4 +0,0 @@
-package net.unnamed.scripting.context
-
-object ModuleEvalREPLContext extends GraalJSREPLContext {
-}
diff --git a/src/minecraft/net/unnamed/scripting/context/REPLContext.scala b/src/minecraft/net/unnamed/scripting/context/REPLContext.scala
deleted file mode 100644
index 2dc0180..0000000
--- a/src/minecraft/net/unnamed/scripting/context/REPLContext.scala
+++ /dev/null
@@ -1,7 +0,0 @@
-package net.unnamed.scripting.context
-
-trait REPLContext {
-  def interpret(code: String): Unit
-  def eval(code: String): Any
-  def dispose(): Unit
-}
diff --git a/src/minecraft/net/unnamed/scripting/scripts/Script.scala b/src/minecraft/net/unnamed/scripting/scripts/Script.scala
deleted file mode 100644
index 6268632..0000000
--- a/src/minecraft/net/unnamed/scripting/scripts/Script.scala
+++ /dev/null
@@ -1,30 +0,0 @@
-package net.unnamed.scripting.scripts
-
-import net.unnamed.scripting.context.{GraalJSREPLContext, REPLContext, ScalaREPLContext}
-import org.apache.commons.io.FilenameUtils
-
-import java.io.{BufferedReader, File}
-import java.nio.file.Files
-
-
-abstract class Script (val file: File) {
-  val scriptText = new String(Files.readAllBytes(file.toPath))
-
-  def load(): Unit = {
-    context().interpret(scriptText)
-  }
-  def context(): REPLContext
-}
-
-object Script {
-  def loadFromFile(file: File): Script = {
-    FilenameUtils.getExtension(file.getName) match {
-      case "js" => new Script(file) {
-        override def context(): REPLContext = new GraalJSREPLContext
-      }
-      case "scala" => new Script(file) {
-        override def context(): REPLContext = new ScalaREPLContext
-      }
-    }
-  }
-}
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/scripting/scripts/Scripts.scala b/src/minecraft/net/unnamed/scripting/scripts/Scripts.scala
deleted file mode 100644
index b92405b..0000000
--- a/src/minecraft/net/unnamed/scripting/scripts/Scripts.scala
+++ /dev/null
@@ -1,5 +0,0 @@
-package net.unnamed.scripting.scripts
-
-case object Scripts {
-
-}
diff --git a/src/minecraft/net/unnamed/settings/setting/Setting.scala b/src/minecraft/net/unnamed/settings/setting/Setting.scala
deleted file mode 100644
index 02787fe..0000000
--- a/src/minecraft/net/unnamed/settings/setting/Setting.scala
+++ /dev/null
@@ -1,103 +0,0 @@
-package net.unnamed.settings.setting
-
-import com.google.gson.{Gson, GsonBuilder, JsonDeserializationContext, JsonDeserializer, JsonElement, JsonSerializationContext, JsonSerializer}
-import com.google.gson.annotations.Expose
-import net.unnamed.settings.Settings
-
-import java.lang.reflect.Type
-
-trait Setting[T] {
-  // TODO: integrate with internal REPL (that doesn't exist yet)
-
-  @(Expose @annotation.meta.field)
-  var expr: String = null
-
-  protected def valueFromSetting: T
-
-  def getValue: T = {
-    //    if (expr != null)
-    //      eval(expr)
-    //    else
-    valueFromSetting
-  }
-
-  def set(value: T): Unit
-
-  val suggestedValue: String
-}
-
-object SettingSerializer extends JsonSerializer[Setting[_]] {
-
-  val serializer: Gson =  new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()
-
-  override def serialize(src: Setting[_], `type`: Type, jsonSerializationContext: JsonSerializationContext): JsonElement = {
-    val jsonObject = serializer.toJsonTree(src).getAsJsonObject
-    jsonObject.addProperty("expr", src.expr)
-    jsonObject
-  }
-}
-
-object SettingDeserializer extends JsonDeserializer[Setting[_]] {
-
-  val serializer: Gson =  new Gson()
-
-  override def deserialize(jsonElement: JsonElement, `type`: Type, jsonDeserializationContext: JsonDeserializationContext): Setting[_] = {
-    val setting = serializer.fromJson(jsonElement, `type`).asInstanceOf[Setting[_]]
-    val expr = jsonElement.getAsJsonObject.get("expr")
-    if (expr != null)
-      setting.expr = expr.getAsString
-    setting
-  }
-}
-
-
-class BoolSetting(
-                   @(Expose @annotation.meta.field)
-                   private var on: Boolean,
-                   private val default: Boolean = false) extends Setting[Boolean] {
-  override def set(value: Boolean): Unit =
-    on = value
-
-  override def valueFromSetting: Boolean = on
-
-  override val suggestedValue: String = default.toString
-}
-
-class IntegerSetting(
-                      @(Expose @annotation.meta.field)
-                      private var number: Int,
-                      private val suggestedLower: Int = 0,
-                      private val suggestedHigher: Int = 1) extends Setting[Int] {
-  override def valueFromSetting: Int = number
-
-  override def set(value: Int): Unit =
-    number = value
-
-  override val suggestedValue: String = s"[$suggestedLower, $suggestedHigher]"
-}
-
-
-class FloatSetting(
-                    @(Expose @annotation.meta.field)
-                    private var number: Float,
-                    private val suggestedLower: Float = 0,
-                    private val suggestedHigher: Float = 1) extends Setting[Float] {
-  override def valueFromSetting: Float = number
-
-  override def set(value: Float): Unit =
-    number = value
-
-  override val suggestedValue: String = s"[$suggestedLower, $suggestedHigher]"
-}
-
-class ListSetting(
-                   @(Expose @annotation.meta.field)
-                   private var choice: String,
-                   private val suggestedList: List[String]) extends Setting[String] {
-  override def valueFromSetting: String = choice
-
-  override def set(value: String): Unit =
-    choice = value
-
-  override val suggestedValue: String = suggestedList.toString()
-}
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/world/ClientSideWorld.scala b/src/minecraft/net/unnamed/world/ClientSideWorld.scala
deleted file mode 100644
index 3364161..0000000
--- a/src/minecraft/net/unnamed/world/ClientSideWorld.scala
+++ /dev/null
@@ -1,24 +0,0 @@
-package net.unnamed.world
-
-import net.minecraft.client.multiplayer.WorldClient
-import net.minecraft.entity.Entity
-import net.unnamed.utils.common.ifce.MinecraftInstance
-import net.unnamed.world.inputcontrol.Cameras
-
-class ClientSideWorld (val world: WorldClient) extends MinecraftInstance {
-
-  val cameras = new Cameras
-
-  val clientSideEntityIdBegin: Int = -10000000
-  var clientSideEntityId: Int = clientSideEntityIdBegin
-
-  // TODO: find other solution that is not so hacky
-  def addClientEntity(entity: Entity): Unit = {
-    mc.theWorld.addEntityToWorld(clientSideEntityId, entity)
-    clientSideEntityId -= 1
-  }
-
-  def isClientSideEntity(entity: Entity): Boolean = {
-    entity.getEntityId <= clientSideEntityIdBegin
-  }
-}
diff --git a/src/minecraft/fuck/you/scala/Utils.scala b/src/unnamed-client/fuck/you/scala/Utils.scala
similarity index 100%
rename from src/minecraft/fuck/you/scala/Utils.scala
rename to src/unnamed-client/fuck/you/scala/Utils.scala
diff --git a/src/minecraft/net/unnamed/Unnamed.scala b/src/unnamed-client/net/unnamed/Unnamed.scala
similarity index 71%
rename from src/minecraft/net/unnamed/Unnamed.scala
rename to src/unnamed-client/net/unnamed/Unnamed.scala
index 1d499bc..454c71a 100644
--- a/src/minecraft/net/unnamed/Unnamed.scala
+++ b/src/unnamed-client/net/unnamed/Unnamed.scala
@@ -4,11 +4,11 @@ import net.unnamed.event.unnamed.UnnamedEventsGen
 import net.unnamed.event.vanilla.WorldEvent
 import net.unnamed.event.{AlwaysActiveListener, EventBus}
 import net.unnamed.modules.Modules
-import net.unnamed.scripting.Contexts
+import net.unnamed.scripting.ScriptingContexts
 import net.unnamed.settings.Settings
 import net.unnamed.world.ClientSideWorld
 
-object Unnamed {
+case object Unnamed {
   val name = "unnamed"
   val version = "0.0.0"
 
@@ -17,16 +17,13 @@ object Unnamed {
   var clientSideWorld: Option[ClientSideWorld] = None
 
   val launch: Unit = {
-
-    EventBus += new AlwaysActiveListener[WorldEvent]((event: WorldEvent) => {
-        clientSideWorld = Some(new ClientSideWorld(event.worldClient))
-    })
-
+    ClientSideWorld
     UnnamedEventsGen
-    Modules
     Settings
+    ScriptingContexts
+
+    Modules
 
-    Contexts
 
     Settings.loadSettings()
     Settings.changeActiveLocalSetting()
diff --git a/src/minecraft/net/unnamed/cheats/packet/modification/Velocity.scala b/src/unnamed-client/net/unnamed/cheats/packet/modification/Velocity.scala
similarity index 92%
rename from src/minecraft/net/unnamed/cheats/packet/modification/Velocity.scala
rename to src/unnamed-client/net/unnamed/cheats/packet/modification/Velocity.scala
index bd77127..77a89e9 100644
--- a/src/minecraft/net/unnamed/cheats/packet/modification/Velocity.scala
+++ b/src/unnamed-client/net/unnamed/cheats/packet/modification/Velocity.scala
@@ -6,7 +6,7 @@ import net.unnamed.utils.common.ifce.MinecraftInstance
 import javax.vecmath.Vector2d
 
 
-object Velocity extends MinecraftInstance {
+case object Velocity extends MinecraftInstance {
 
   def cancelPlayerKnockBackEvent(event: PlayerGotKnockedBackEvent): Unit = {
     event.cancel()
diff --git a/src/minecraft/net/unnamed/event/Event.scala b/src/unnamed-client/net/unnamed/event/Event.scala
similarity index 100%
rename from src/minecraft/net/unnamed/event/Event.scala
rename to src/unnamed-client/net/unnamed/event/Event.scala
diff --git a/src/minecraft/net/unnamed/event/EventAlias.scala b/src/unnamed-client/net/unnamed/event/EventAlias.scala
similarity index 100%
rename from src/minecraft/net/unnamed/event/EventAlias.scala
rename to src/unnamed-client/net/unnamed/event/EventAlias.scala
diff --git a/src/minecraft/net/unnamed/event/EventBus.scala b/src/unnamed-client/net/unnamed/event/EventBus.scala
similarity index 100%
rename from src/minecraft/net/unnamed/event/EventBus.scala
rename to src/unnamed-client/net/unnamed/event/EventBus.scala
diff --git a/src/minecraft/net/unnamed/event/Listener.scala b/src/unnamed-client/net/unnamed/event/Listener.scala
similarity index 100%
rename from src/minecraft/net/unnamed/event/Listener.scala
rename to src/unnamed-client/net/unnamed/event/Listener.scala
diff --git a/src/unnamed-client/net/unnamed/event/unnamed/ActiveSettingsChangedEvent.scala b/src/unnamed-client/net/unnamed/event/unnamed/ActiveSettingsChangedEvent.scala
new file mode 100644
index 0000000..534135e
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/event/unnamed/ActiveSettingsChangedEvent.scala
@@ -0,0 +1,5 @@
+package net.unnamed.event.unnamed
+
+import net.unnamed.event.Event
+
+final case class ActiveSettingsChangedEvent() extends Event
diff --git a/src/minecraft/net/unnamed/event/unnamed/ModuleToggleEvent.scala b/src/unnamed-client/net/unnamed/event/unnamed/ModuleToggleEvent.scala
similarity index 61%
rename from src/minecraft/net/unnamed/event/unnamed/ModuleToggleEvent.scala
rename to src/unnamed-client/net/unnamed/event/unnamed/ModuleToggleEvent.scala
index d717a98..1178d81 100644
--- a/src/minecraft/net/unnamed/event/unnamed/ModuleToggleEvent.scala
+++ b/src/unnamed-client/net/unnamed/event/unnamed/ModuleToggleEvent.scala
@@ -3,4 +3,4 @@ package net.unnamed.event.unnamed
 import net.unnamed.event.Event
 import net.unnamed.modules.Module
 
-case class ModuleToggleEvent(module: Module) extends Event
\ No newline at end of file
+final case class ModuleToggleEvent(module: Module) extends Event
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/event/unnamed/PlayerGotKnockedBackEvent.scala b/src/unnamed-client/net/unnamed/event/unnamed/PlayerGotKnockedBackEvent.scala
similarity index 58%
rename from src/minecraft/net/unnamed/event/unnamed/PlayerGotKnockedBackEvent.scala
rename to src/unnamed-client/net/unnamed/event/unnamed/PlayerGotKnockedBackEvent.scala
index 867667b..526f475 100644
--- a/src/minecraft/net/unnamed/event/unnamed/PlayerGotKnockedBackEvent.scala
+++ b/src/unnamed-client/net/unnamed/event/unnamed/PlayerGotKnockedBackEvent.scala
@@ -3,4 +3,4 @@ package net.unnamed.event.unnamed
 import net.minecraft.network.play.server.S12PacketEntityVelocity
 import net.unnamed.event.CancelableEvent
 
-case class PlayerGotKnockedBackEvent(packet: S12PacketEntityVelocity) extends CancelableEvent
+final case class PlayerGotKnockedBackEvent(packet: S12PacketEntityVelocity) extends CancelableEvent
diff --git a/src/unnamed-client/net/unnamed/event/unnamed/PlayerMovementCalculatePreEvent.scala b/src/unnamed-client/net/unnamed/event/unnamed/PlayerMovementCalculatePreEvent.scala
new file mode 100644
index 0000000..97908de
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/event/unnamed/PlayerMovementCalculatePreEvent.scala
@@ -0,0 +1,7 @@
+package net.unnamed.event.unnamed
+
+import net.unnamed.event.CancelableEvent
+
+final case class PlayerMovementCalculatePreEvent(var forward: java.lang.Float,
+                                                 var strafe: java.lang.Float,
+                                                 var friction: java.lang.Float) extends CancelableEvent
diff --git a/src/minecraft/net/unnamed/event/unnamed/ProbFromServerEvent.scala b/src/unnamed-client/net/unnamed/event/unnamed/ProbFromServerEvent.scala
similarity index 61%
rename from src/minecraft/net/unnamed/event/unnamed/ProbFromServerEvent.scala
rename to src/unnamed-client/net/unnamed/event/unnamed/ProbFromServerEvent.scala
index 85874df..3b30dd1 100644
--- a/src/minecraft/net/unnamed/event/unnamed/ProbFromServerEvent.scala
+++ b/src/unnamed-client/net/unnamed/event/unnamed/ProbFromServerEvent.scala
@@ -1,6 +1,6 @@
 package net.unnamed.event.unnamed
 
-import net.unnamed.event.CancelableEvent
+import net.unnamed.event.Event
 import net.unnamed.event.unnamed.ServerProbes.Probe
 
 object ServerProbes extends Enumeration {
@@ -9,4 +9,4 @@ object ServerProbes extends Enumeration {
   val TRANSACTION_PING, FILE_PROB_OUT_OF_RCPACK_FOLDER = Value
 }
 
-case class ProbeFromServerEvent(probeType: Probe, message: String = "") extends CancelableEvent
+final case class ProbeFromServerEvent(probeType: Probe, message: String = "") extends Event
diff --git a/src/unnamed-client/net/unnamed/event/unnamed/ScriptsLoadedEvent.scala b/src/unnamed-client/net/unnamed/event/unnamed/ScriptsLoadedEvent.scala
new file mode 100644
index 0000000..7b5efd0
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/event/unnamed/ScriptsLoadedEvent.scala
@@ -0,0 +1,5 @@
+package net.unnamed.event.unnamed
+
+import net.unnamed.event.Event
+
+final case class ScriptsLoadedEvent(unload: Boolean) extends Event
diff --git a/src/minecraft/net/unnamed/event/unnamed/UnnamedEventsGen.scala b/src/unnamed-client/net/unnamed/event/unnamed/UnnamedEventsGen.scala
similarity index 87%
rename from src/minecraft/net/unnamed/event/unnamed/UnnamedEventsGen.scala
rename to src/unnamed-client/net/unnamed/event/unnamed/UnnamedEventsGen.scala
index c26f6b1..b94e1fb 100644
--- a/src/minecraft/net/unnamed/event/unnamed/UnnamedEventsGen.scala
+++ b/src/unnamed-client/net/unnamed/event/unnamed/UnnamedEventsGen.scala
@@ -1,12 +1,11 @@
 package net.unnamed.event.unnamed
 
-import net.minecraft.network.play.client.C0FPacketConfirmTransaction
-import net.minecraft.network.play.server.{S12PacketEntityVelocity, S23PacketBlockChange, S32PacketConfirmTransaction}
+import net.minecraft.network.play.server.{S12PacketEntityVelocity, S32PacketConfirmTransaction}
 import net.unnamed.event.vanilla.{MovementCalculatePreEvent, PacketEvent}
-import net.unnamed.event.{AlwaysActiveListener, Event, EventBus}
+import net.unnamed.event.{AlwaysActiveListener, EventBus}
 import net.unnamed.utils.common.ifce.MinecraftInstance
 
-object UnnamedEventsGen extends MinecraftInstance {
+case object UnnamedEventsGen extends MinecraftInstance {
   {
     EventBus +=
       new AlwaysActiveListener[PacketEvent](
diff --git a/src/minecraft/net/unnamed/event/vanilla/ClientShutDownEvent.scala b/src/unnamed-client/net/unnamed/event/vanilla/ClientShutDownEvent.scala
similarity index 55%
rename from src/minecraft/net/unnamed/event/vanilla/ClientShutDownEvent.scala
rename to src/unnamed-client/net/unnamed/event/vanilla/ClientShutDownEvent.scala
index 66d3169..7d4062c 100644
--- a/src/minecraft/net/unnamed/event/vanilla/ClientShutDownEvent.scala
+++ b/src/unnamed-client/net/unnamed/event/vanilla/ClientShutDownEvent.scala
@@ -2,4 +2,4 @@ package net.unnamed.event.vanilla
 
 import net.unnamed.event.CancelableEvent
 
-case class ClientShutDownEvent() extends CancelableEvent
+final case class ClientShutDownEvent() extends CancelableEvent
diff --git a/src/minecraft/net/unnamed/event/vanilla/CurrentGUIScreenUpdateEvent.scala b/src/unnamed-client/net/unnamed/event/vanilla/CurrentGUIScreenUpdateEvent.scala
similarity index 56%
rename from src/minecraft/net/unnamed/event/vanilla/CurrentGUIScreenUpdateEvent.scala
rename to src/unnamed-client/net/unnamed/event/vanilla/CurrentGUIScreenUpdateEvent.scala
index e75382d..e9c2144 100644
--- a/src/minecraft/net/unnamed/event/vanilla/CurrentGUIScreenUpdateEvent.scala
+++ b/src/unnamed-client/net/unnamed/event/vanilla/CurrentGUIScreenUpdateEvent.scala
@@ -3,4 +3,4 @@ package net.unnamed.event.vanilla
 import net.minecraft.client.gui.GuiScreen
 import net.unnamed.event.CancelableEvent
 
-case class CurrentGUIScreenUpdateEvent(newScreen: GuiScreen) extends CancelableEvent
+final case class CurrentGUIScreenUpdateEvent(newScreen: GuiScreen) extends CancelableEvent
diff --git a/src/minecraft/net/unnamed/event/vanilla/MovementCalculatePreEvent.scala b/src/unnamed-client/net/unnamed/event/vanilla/MovementCalculatePreEvent.scala
similarity index 85%
rename from src/minecraft/net/unnamed/event/vanilla/MovementCalculatePreEvent.scala
rename to src/unnamed-client/net/unnamed/event/vanilla/MovementCalculatePreEvent.scala
index 3973c83..55a9a67 100644
--- a/src/minecraft/net/unnamed/event/vanilla/MovementCalculatePreEvent.scala
+++ b/src/unnamed-client/net/unnamed/event/vanilla/MovementCalculatePreEvent.scala
@@ -3,7 +3,7 @@ package net.unnamed.event.vanilla
 import net.minecraft.entity.Entity
 import net.unnamed.event.CancelableEvent
 
-case class MovementCalculatePreEvent(entity: Entity,
+final case class MovementCalculatePreEvent(entity: Entity,
                                      var forward: java.lang.Float,
                                      var strafe: java.lang.Float,
                                      var friction: java.lang.Float) extends CancelableEvent
diff --git a/src/minecraft/net/unnamed/event/vanilla/PacketEvent.scala b/src/unnamed-client/net/unnamed/event/vanilla/PacketEvent.scala
similarity index 61%
rename from src/minecraft/net/unnamed/event/vanilla/PacketEvent.scala
rename to src/unnamed-client/net/unnamed/event/vanilla/PacketEvent.scala
index 62d7d9c..50b0c87 100644
--- a/src/minecraft/net/unnamed/event/vanilla/PacketEvent.scala
+++ b/src/unnamed-client/net/unnamed/event/vanilla/PacketEvent.scala
@@ -3,4 +3,4 @@ package net.unnamed.event.vanilla
 import net.minecraft.network.Packet
 import net.unnamed.event.CancelableEvent
 
-case class PacketEvent(packet: Packet[_]) extends CancelableEvent
\ No newline at end of file
+final case class PacketEvent(packet: Packet[_]) extends CancelableEvent
\ No newline at end of file
diff --git a/src/unnamed-client/net/unnamed/event/vanilla/RenderEntityEvent.scala b/src/unnamed-client/net/unnamed/event/vanilla/RenderEntityEvent.scala
new file mode 100644
index 0000000..8fbd92c
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/event/vanilla/RenderEntityEvent.scala
@@ -0,0 +1,6 @@
+package net.unnamed.event.vanilla
+
+import net.minecraft.entity.Entity
+import net.unnamed.event.CancelableEvent
+
+case class RenderEntityEvent(entity: Entity, partialTicks: Float) extends CancelableEvent
diff --git a/src/unnamed-client/net/unnamed/event/vanilla/RenderEvent.scala b/src/unnamed-client/net/unnamed/event/vanilla/RenderEvent.scala
new file mode 100644
index 0000000..c3c0982
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/event/vanilla/RenderEvent.scala
@@ -0,0 +1,6 @@
+package net.unnamed.event.vanilla
+
+import net.unnamed.event.Event
+
+final case class Render3DEvent(partialTicks: Float) extends Event
+final case class Render2DEvent(partialTicks: Float) extends Event
diff --git a/src/minecraft/net/unnamed/event/vanilla/WorldEvent.scala b/src/unnamed-client/net/unnamed/event/vanilla/WorldEvent.scala
similarity index 63%
rename from src/minecraft/net/unnamed/event/vanilla/WorldEvent.scala
rename to src/unnamed-client/net/unnamed/event/vanilla/WorldEvent.scala
index d2496f1..e84a653 100644
--- a/src/minecraft/net/unnamed/event/vanilla/WorldEvent.scala
+++ b/src/unnamed-client/net/unnamed/event/vanilla/WorldEvent.scala
@@ -3,4 +3,4 @@ package net.unnamed.event.vanilla
 import net.minecraft.client.multiplayer.WorldClient
 import net.unnamed.event.Event
 
-case class WorldEvent(worldClient: WorldClient) extends Event
\ No newline at end of file
+final case class WorldEvent(worldClient: WorldClient) extends Event
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/modules/Module.scala b/src/unnamed-client/net/unnamed/modules/Module.scala
similarity index 92%
rename from src/minecraft/net/unnamed/modules/Module.scala
rename to src/unnamed-client/net/unnamed/modules/Module.scala
index 1881b6f..0938595 100644
--- a/src/minecraft/net/unnamed/modules/Module.scala
+++ b/src/unnamed-client/net/unnamed/modules/Module.scala
@@ -4,16 +4,17 @@ import net.unnamed.event.unnamed.ModuleToggleEvent
 import net.unnamed.event.{Event, EventBus, Listener}
 import net.unnamed.settings.Settings.ISaveLocal
 import net.unnamed.settings.setting.SaveThisAlso
-import net.unnamed.utils.common.ifce.{ClientInstance, MinecraftInstance, Toggleable}
+import net.unnamed.utils.common.ifce.{ClientInstance, MinecraftInstance, Nameable, Toggleable}
 
 import scala.reflect.ClassTag
 
 
 class Module(
               val description: String = "As the name suggests"
-            ) extends Toggleable with ClientInstance with MinecraftInstance with ISaveLocal {
+            ) extends Toggleable with ClientInstance with MinecraftInstance with ISaveLocal with Nameable {
 
   {
+    name = getClass.getSimpleName
   }
 
   @SaveThisAlso
@@ -36,9 +37,6 @@ class Module(
 
   override def isOn: Boolean = state
 
-
-  val moduleName: String = getClass.getSimpleName
-
   def onEnable(): Unit = {}
 
   def onDisable(): Unit = {}
diff --git a/src/minecraft/net/unnamed/modules/Modules.scala b/src/unnamed-client/net/unnamed/modules/Modules.scala
similarity index 63%
rename from src/minecraft/net/unnamed/modules/Modules.scala
rename to src/unnamed-client/net/unnamed/modules/Modules.scala
index 27a33fc..bf8fb9b 100644
--- a/src/minecraft/net/unnamed/modules/Modules.scala
+++ b/src/unnamed-client/net/unnamed/modules/Modules.scala
@@ -1,14 +1,25 @@
 package net.unnamed.modules
 
 import net.minecraft.client.gui.GuiIngameMenu
+import net.unnamed.event.unnamed.ActiveSettingsChangedEvent
 import net.unnamed.event.vanilla.{CurrentGUIScreenUpdateEvent, WorldEvent}
-import net.unnamed.event.{AlwaysActiveListener, EventBus}
+import net.unnamed.event.{AlwaysActiveListener, Event, EventBus}
 import net.unnamed.modules.antiexploit.AntiScanFromResourcePackConfirm
-import net.unnamed.modules.render.{AntiBlind, FreeCam, FullBright, NoFOV, NoHurtVibration}
+import net.unnamed.modules.render.{AntiBlind, Chams, ESP, FreeCam, FullBright, NoFOV, NoHurtVibration}
 
 case object Modules {
   var modules: List[Module] = Nil
 
+  def loadModuleSettings(): Unit = {
+    for (module <- modules) {
+
+      module.loadSetting()
+
+      if (!module.enableOnJoin)
+        module.off()
+    }
+  }
+
 
   {
     // TODO: can we do that by reflection or do we need to reference explicitly here?
@@ -18,21 +29,20 @@ case object Modules {
     modules ::= NoFOV
     modules ::= NoHurtVibration
     modules ::= AntiBlind
+    modules ::= Chams
+    modules ::= ESP
 
 
     EventBus +=
       new AlwaysActiveListener[WorldEvent]((event: WorldEvent) => {
-        if (event.worldClient != null)
-          for (module <- modules) {
-
-            module.loadSetting()
-
-            if (!module.enableOnJoin)
-              module.off()
+        if (event.worldClient != null) {
+          loadModuleSettings()
 
+          for (module <- modules) {
             if (module.isOn)
               module.onEnable()
           }
+        }
         else
           for (module <- modules) {
             if (module.isOn) module.onDisable()
@@ -43,6 +53,9 @@ case object Modules {
           for (module <- modules)
             module.saveSetting()
         }
+      }) +=
+      new AlwaysActiveListener[ActiveSettingsChangedEvent]((_: ActiveSettingsChangedEvent) => {
+        loadModuleSettings()
       })
   }
 
diff --git a/src/minecraft/net/unnamed/modules/antiexploit/AntiScanFromResourcePackConfirm.scala b/src/unnamed-client/net/unnamed/modules/antiexploit/AntiScanFromResourcePackConfirm.scala
similarity index 100%
rename from src/minecraft/net/unnamed/modules/antiexploit/AntiScanFromResourcePackConfirm.scala
rename to src/unnamed-client/net/unnamed/modules/antiexploit/AntiScanFromResourcePackConfirm.scala
diff --git a/src/minecraft/net/unnamed/modules/render/AntiBlind.scala b/src/unnamed-client/net/unnamed/modules/render/AntiBlind.scala
similarity index 100%
rename from src/minecraft/net/unnamed/modules/render/AntiBlind.scala
rename to src/unnamed-client/net/unnamed/modules/render/AntiBlind.scala
diff --git a/src/unnamed-client/net/unnamed/modules/render/Chams.scala b/src/unnamed-client/net/unnamed/modules/render/Chams.scala
new file mode 100644
index 0000000..27abdfc
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/modules/render/Chams.scala
@@ -0,0 +1,8 @@
+package net.unnamed.modules.render
+
+import net.unnamed.modules.Module
+import net.unnamed.settings.setting.EntitySelectorSetting
+
+case object Chams extends Module {
+  val entitySelector = new EntitySelectorSetting()
+}
diff --git a/src/unnamed-client/net/unnamed/modules/render/ESP.scala b/src/unnamed-client/net/unnamed/modules/render/ESP.scala
new file mode 100644
index 0000000..f7bf54a
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/modules/render/ESP.scala
@@ -0,0 +1,28 @@
+package net.unnamed.modules.render
+
+import net.minecraft.entity.Entity
+import net.unnamed.Unnamed
+
+import scala.collection.convert.ImplicitConversions.`list asScalaBuffer`
+import net.unnamed.event.vanilla.Render3DEvent
+import net.unnamed.modules.Module
+import net.unnamed.settings.setting.{ColorSetting, EntitySelectorSetting}
+import net.unnamed.utils.RenderUtils
+import net.unnamed.utils.target.selector.EntitySelector
+import net.unnamed.world.ClientSideWorld
+
+case object ESP extends Module {
+
+  val color = new ColorSetting(86, 156, 214)
+  val entitySelector = new EntitySelectorSetting()
+
+  onEvent((event: Render3DEvent) => {
+    for (entity <- mc.theWorld.loadedEntityList
+         if entitySelector.getValue.isTarget(entity) &&
+           !ClientSideWorld.isClientSideEntity(entity) &&
+           entity.getEntityBoundingBox != Entity.ZERO_AABB &&
+           (entity != mc.getRenderViewEntity ||
+             Unnamed.clientSideWorld.get.cameras.shouldRenderThePlayer(event.partialTicks)))
+      RenderUtils.drawEntityBB(entity)(partialTicks = event.partialTicks)(color.getValue)
+  })
+}
diff --git a/src/minecraft/net/unnamed/modules/render/FreeCam.scala b/src/unnamed-client/net/unnamed/modules/render/FreeCam.scala
similarity index 100%
rename from src/minecraft/net/unnamed/modules/render/FreeCam.scala
rename to src/unnamed-client/net/unnamed/modules/render/FreeCam.scala
diff --git a/src/minecraft/net/unnamed/modules/render/FullBright.scala b/src/unnamed-client/net/unnamed/modules/render/FullBright.scala
similarity index 100%
rename from src/minecraft/net/unnamed/modules/render/FullBright.scala
rename to src/unnamed-client/net/unnamed/modules/render/FullBright.scala
diff --git a/src/minecraft/net/unnamed/modules/render/NoFOV.scala b/src/unnamed-client/net/unnamed/modules/render/NoFOV.scala
similarity index 100%
rename from src/minecraft/net/unnamed/modules/render/NoFOV.scala
rename to src/unnamed-client/net/unnamed/modules/render/NoFOV.scala
diff --git a/src/minecraft/net/unnamed/modules/render/NoHurtVibration.scala b/src/unnamed-client/net/unnamed/modules/render/NoHurtVibration.scala
similarity index 100%
rename from src/minecraft/net/unnamed/modules/render/NoHurtVibration.scala
rename to src/unnamed-client/net/unnamed/modules/render/NoHurtVibration.scala
diff --git a/src/unnamed-client/net/unnamed/scripting/ScriptingContexts.scala b/src/unnamed-client/net/unnamed/scripting/ScriptingContexts.scala
new file mode 100644
index 0000000..4ec9d5f
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/scripting/ScriptingContexts.scala
@@ -0,0 +1,23 @@
+package net.unnamed.scripting
+
+import net.unnamed.scripting.context.ScriptingContext
+import net.unnamed.scripting.scripts.{Script, Scripts}
+
+case object ScriptingContexts {
+  private var contexts: List[ScriptingContext] = Nil
+
+  def addContext(context: ScriptingContext): Unit =
+    contexts ::= context
+
+  def removeContext(context: ScriptingContext): Unit =
+    contexts = contexts diff List(context)
+
+  def +=(context: ScriptingContext): Unit =
+    addContext(context)
+
+  def -=(context: ScriptingContext): Unit =
+    removeContext(context)
+
+  def getContexts: List[ScriptingContext] =
+    (contexts :: Scripts.scripts.map((script: Script) => script.context())).asInstanceOf[List[ScriptingContext]]
+}
diff --git a/src/minecraft/net/unnamed/scripting/context/GraalJSREPLContext.scala b/src/unnamed-client/net/unnamed/scripting/context/GraalJSScriptingContext.scala
similarity index 67%
rename from src/minecraft/net/unnamed/scripting/context/GraalJSREPLContext.scala
rename to src/unnamed-client/net/unnamed/scripting/context/GraalJSScriptingContext.scala
index fe163e3..e6f2a66 100644
--- a/src/minecraft/net/unnamed/scripting/context/GraalJSREPLContext.scala
+++ b/src/unnamed-client/net/unnamed/scripting/context/GraalJSScriptingContext.scala
@@ -2,7 +2,7 @@ package net.unnamed.scripting.context
 
 import org.graalvm.polyglot.{Context, HostAccess, Source}
 
-class GraalJSREPLContext extends net.unnamed.scripting.context.REPLContext {
+class GraalJSScriptingContext extends net.unnamed.scripting.context.ScriptingContext {
 
   val graalContext: Context = {
     val context = Context
@@ -13,7 +13,10 @@ class GraalJSREPLContext extends net.unnamed.scripting.context.REPLContext {
       .allowHostClassLoading(true)
       .allowIO(true)
       .allowCreateThread(true)
+      .allowNativeAccess(true)
+      .option("js.nashorn-compat", "true")
       .option("js.ecmascript-version", "2022")
+      .option("engine.WarnInterpreterOnly", "false")
       .build()
 
     context.eval("js", """const Unnamed = Java.type("net.unnamed.Unnamed")""")
@@ -25,7 +28,14 @@ class GraalJSREPLContext extends net.unnamed.scripting.context.REPLContext {
 
 
   override def eval(code: String) = {
-    graalContext.eval("js", code).as(classOf[Any])
+    if (debug)
+      try
+        graalContext.eval("js", code).as(classOf[Any])
+      catch {
+        case err: Throwable => onError(err)
+      }
+    else
+      graalContext.eval("js", code).as(classOf[Any])
   }
 
   override def dispose(): Unit =
diff --git a/src/minecraft/net/unnamed/scripting/context/ScalaREPLContext.scala b/src/unnamed-client/net/unnamed/scripting/context/ScalaScriptingContext.scala
similarity index 63%
rename from src/minecraft/net/unnamed/scripting/context/ScalaREPLContext.scala
rename to src/unnamed-client/net/unnamed/scripting/context/ScalaScriptingContext.scala
index 3cf1e64..0e5c6a0 100644
--- a/src/minecraft/net/unnamed/scripting/context/ScalaREPLContext.scala
+++ b/src/unnamed-client/net/unnamed/scripting/context/ScalaScriptingContext.scala
@@ -5,7 +5,7 @@ import scala.tools.nsc.interpreter.shell.ReplReporterImpl
 import scala.tools.nsc.interpreter.{IMain, ReplReporter, Results}
 
 
-class ScalaREPLContext extends REPLContext {
+class ScalaScriptingContext extends ScriptingContext {
 
   val settings: Settings = {
     val settings = new Settings()
@@ -24,7 +24,7 @@ class ScalaREPLContext extends REPLContext {
     interpreter
   }
 
-  override def eval(code: String): Any = {
+  private def evalNoExceptionHandling(code: String): AnyRef = {
     val compiled = interpreter.compile(code, synthetic = true)
 
     compiled match {
@@ -39,7 +39,27 @@ class ScalaREPLContext extends REPLContext {
     }
   }
 
+  override def eval(code: String): Any = {
+    if (debug)
+      try
+        evalNoExceptionHandling(code)
+      catch {
+        case err: Throwable => onError(err)
+      }
+    else
+      evalNoExceptionHandling(code)
+  }
+
   override def dispose(): Unit = interpreter.close()
 
-  override def interpret(code: String): Unit = interpreter.interpret(code, synthetic = true)
+  override def interpret(code: String): Unit = {
+    if (debug)
+      try
+        interpreter.interpret(code, synthetic = true)
+      catch {
+        case err: Throwable => onError(err)
+      }
+    else
+      interpreter.interpret(code, synthetic = true)
+  }
 }
diff --git a/src/unnamed-client/net/unnamed/scripting/context/ScriptingContext.scala b/src/unnamed-client/net/unnamed/scripting/context/ScriptingContext.scala
new file mode 100644
index 0000000..a2c4e75
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/scripting/context/ScriptingContext.scala
@@ -0,0 +1,14 @@
+package net.unnamed.scripting.context
+
+import net.unnamed.utils.common.ifce.Nameable
+
+trait ScriptingContext extends Nameable {
+  var debug = false
+
+  var print: String => Unit = (string: String) => {}
+  var onError: Throwable => Unit = (err: Throwable) => {}
+
+  def interpret(code: String): Unit
+  def eval(code: String): Any
+  def dispose(): Unit
+}
diff --git a/src/unnamed-client/net/unnamed/scripting/scripts/Script.scala b/src/unnamed-client/net/unnamed/scripting/scripts/Script.scala
new file mode 100644
index 0000000..be46f2b
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/scripting/scripts/Script.scala
@@ -0,0 +1,51 @@
+package net.unnamed.scripting.scripts
+
+import net.unnamed.scripting.context.{GraalJSScriptingContext, ScalaScriptingContext, ScriptingContext}
+import net.unnamed.utils.common.ifce.Nameable
+import org.apache.commons.io.FilenameUtils
+
+import java.io.{BufferedReader, File}
+import java.nio.file.Files
+
+
+abstract class Script(val file: File) extends Nameable {
+  val scriptText = new String(Files.readAllBytes(file.toPath))
+
+  {
+    name = file.getName + this.toString
+  }
+
+  def load(): Unit = {
+    context().interpret(scriptText)
+  }
+
+  def `import`(anotherScript: File): Any =
+    context().eval(new String(Files.readAllBytes(anotherScript.toPath)))
+
+  def context(): ScriptingContext
+}
+
+object Script {
+  def loadFromFile(file: File): Script = {
+
+    if (!file.exists())
+      file.createNewFile()
+
+    FilenameUtils.getExtension(file.getName) match {
+      case "js" => new Script(file) {
+        val jsContext: GraalJSScriptingContext = new GraalJSScriptingContext {
+          name = s"FromScript[${file.getName}], ${this.toString}"
+        }
+
+        override def context(): ScriptingContext = jsContext
+      }
+      case "scala" => new Script(file) {
+        val scalaContext: ScalaScriptingContext = new ScalaScriptingContext {
+          name = s"FromScript[${file.getName}], ${this.toString}"
+        }
+
+        override def context(): ScriptingContext = scalaContext
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/src/unnamed-client/net/unnamed/scripting/scripts/Scripts.scala b/src/unnamed-client/net/unnamed/scripting/scripts/Scripts.scala
new file mode 100644
index 0000000..8e1af79
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/scripting/scripts/Scripts.scala
@@ -0,0 +1,44 @@
+package net.unnamed.scripting.scripts
+
+import net.unnamed.event.EventBus
+import net.unnamed.event.unnamed.ScriptsLoadedEvent
+import net.unnamed.settings.Settings
+
+import java.io.File
+
+
+case object Scripts {
+
+  var scripts: List[Script] = Nil
+
+  def loadAll(): Unit = {
+    val globalScriptsDir = new File(Settings.settingsDirectory, "scripts")
+
+    if (!globalScriptsDir.exists())
+      globalScriptsDir.mkdir()
+
+    globalScriptsDir.listFiles().foreach((file: File) =>
+      scripts ::= Script.loadFromFile(file)
+    )
+
+
+    val activeScriptsDir = new File(Settings.activeDirectory, "scripts")
+
+    if (!activeScriptsDir.exists())
+      activeScriptsDir.mkdir()
+
+    activeScriptsDir.listFiles().foreach((file: File) =>
+      scripts ::= Script.loadFromFile(file)
+    )
+
+    EventBus.fireEvent(ScriptsLoadedEvent(unload = false))
+  }
+
+  def unLoadAll(): Unit = {
+    for (script <- scripts)
+      script.context().dispose()
+
+    scripts = Nil
+    EventBus.fireEvent(ScriptsLoadedEvent(unload = true))
+  }
+}
diff --git a/src/minecraft/net/unnamed/settings/Settings.scala b/src/unnamed-client/net/unnamed/settings/Settings.scala
similarity index 88%
rename from src/minecraft/net/unnamed/settings/Settings.scala
rename to src/unnamed-client/net/unnamed/settings/Settings.scala
index ed3a416..f499e8d 100644
--- a/src/minecraft/net/unnamed/settings/Settings.scala
+++ b/src/unnamed-client/net/unnamed/settings/Settings.scala
@@ -1,14 +1,16 @@
 package net.unnamed.settings
 
+import com.google.common.io.Files
 import com.google.gson._
 import com.google.gson.annotations.Expose
 import net.minecraft.client.gui.GuiIngameMenu
 import net.unnamed.Unnamed
+import net.unnamed.event.unnamed.ActiveSettingsChangedEvent
 import net.unnamed.event.vanilla.{ClientShutDownEvent, CurrentGUIScreenUpdateEvent}
 import net.unnamed.event.{AlwaysActiveListener, EventBus}
 import net.unnamed.settings.setting.{SaveThisAlso, Setting, SettingDeserializer, SettingSerializer}
 import net.unnamed.utils.ReflectionUtils
-import net.unnamed.utils.common.ifce.MinecraftInstance
+import net.unnamed.utils.common.ifce.{MinecraftInstance, Nameable}
 
 import java.io.{BufferedReader, File, FileReader, FileWriter}
 import java.lang.reflect.Field
@@ -40,6 +42,11 @@ object Settings extends MinecraftInstance {
     ReflectionUtils.getAllSubClassInPackage(getClass.getPackage, classOf[Setting[_]]).foreach((value: Class[Setting[_]]) => {
       builder.registerTypeAdapter(value, SettingSerializer)
       builder.registerTypeAdapter(value, SettingDeserializer)
+
+      //      if (classOf[NameReferencedSetting[_]].isAssignableFrom(value)) {
+      //        builder.registerTypeAdapter(value, NameableSettingSerializer)
+      //        builder.registerTypeAdapter(value, NameableSettingDeserializer)
+      //      }
     })
 
     builder
@@ -56,7 +63,7 @@ object Settings extends MinecraftInstance {
 
     var settings = new JsonArray
 
-    def loadSetting(): Unit = {
+    def loadSetting(): ISave = {
       for (jsonElement <- settings) {
 
         val jsonObject = jsonElement.getAsJsonObject
@@ -74,7 +81,7 @@ object Settings extends MinecraftInstance {
 
           if (settingField.isAnnotationPresent(classOf[SaveThisAlso]))
             settingField.set(this, deserializedSetting)
-          else
+          else {
             ReflectionUtils.getAllField(originalSetting).foreach((field: Field) => {
 
               if (field.isAnnotationPresent(classOf[Expose])) {
@@ -85,8 +92,17 @@ object Settings extends MinecraftInstance {
                 field.set(originalSetting, field.get(deserializedSetting))
               }
             })
+
+            originalSetting match {
+              case value1: Setting[_] => value1.onChange()
+              case _ =>
+            }
+
+          }
         })
       }
+
+      this
     }
 
     def saveSetting(): Unit = {
@@ -134,9 +150,7 @@ object Settings extends MinecraftInstance {
     if (!settingsDirectory.exists())
       settingsDirectory.mkdir()
 
-    for (file <- settingsDirectory.listFiles()) {
-      if (file.isDirectory)
-        return
+    for (file <- settingsDirectory.listFiles() if !file.isDirectory && Files.getFileExtension(file.getName) == "json") {
 
       val settingFileName = file.getName
 
@@ -153,6 +167,7 @@ object Settings extends MinecraftInstance {
       }
 
     }
+
   }
 
   def changeActiveLocalSetting(settingName: String = "default"): Unit = {
@@ -162,7 +177,7 @@ object Settings extends MinecraftInstance {
     if (!activeDirectory.exists())
       activeDirectory.mkdir()
 
-    for (file <- activeDirectory.listFiles()) {
+    for (file <- activeDirectory.listFiles() if Files.getFileExtension(file.getName) == "json") {
       val settingFileName = file.getName
 
       val fileContent = parser.parse(new BufferedReader(new FileReader(file)))
@@ -178,6 +193,8 @@ object Settings extends MinecraftInstance {
       }
 
     }
+
+    EventBus.fireEvent(ActiveSettingsChangedEvent())
   }
 
   def saveSettings(): Unit = {
diff --git a/src/minecraft/net/unnamed/settings/setting/SaveThisAlso.java b/src/unnamed-client/net/unnamed/settings/setting/SaveThisAlso.java
similarity index 100%
rename from src/minecraft/net/unnamed/settings/setting/SaveThisAlso.java
rename to src/unnamed-client/net/unnamed/settings/setting/SaveThisAlso.java
diff --git a/src/unnamed-client/net/unnamed/settings/setting/Setting.scala b/src/unnamed-client/net/unnamed/settings/setting/Setting.scala
new file mode 100644
index 0000000..7572034
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/settings/setting/Setting.scala
@@ -0,0 +1,177 @@
+package net.unnamed.settings.setting
+
+import com.google.gson
+import com.google.gson.annotations.Expose
+import com.google.gson._
+import net.unnamed.Unnamed
+import net.unnamed.utils.target.selector.EntitySelector
+
+import java.awt.Color
+import java.lang.reflect.Type
+
+trait Setting[T] {
+  @(Expose@annotation.meta.field)
+  var expr: String = null
+
+  protected def valueFromSetting: T
+
+  def getValue: T = {
+    if (expr != null)
+      Unnamed.clientSideWorld.get.
+        moduleEvalContext.context().
+        eval(expr).asInstanceOf[T]
+    else
+      valueFromSetting
+  }
+
+  def onChange(): Unit = {}
+
+  def set(value: T): Unit
+
+  val suggestedValue: String = "Fuck you"
+}
+
+object SettingSerializer extends JsonSerializer[Setting[_]] {
+
+  val serializer: Gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()
+
+  override def serialize(src: Setting[_], `type`: Type, jsonSerializationContext: JsonSerializationContext): JsonElement = {
+    val jsonObject = serializer.toJsonTree(src).getAsJsonObject
+    jsonObject.addProperty("expr", src.expr)
+    jsonObject
+  }
+}
+
+object SettingDeserializer extends JsonDeserializer[Setting[_]] {
+
+  val serializer: Gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()
+
+  override def deserialize(jsonElement: JsonElement, `type`: Type, jsonDeserializationContext: JsonDeserializationContext): Setting[_] = {
+    val setting = serializer.fromJson(jsonElement, `type`).asInstanceOf[Setting[_]]
+    val expr = jsonElement.getAsJsonObject.get("expr")
+    if (expr != null)
+      setting.expr = expr.getAsString
+    setting
+  }
+}
+
+
+final class BoolSetting(
+                         @(Expose@annotation.meta.field)
+                         private var on: Boolean,
+                         private val default: Boolean = false) extends Setting[Boolean] {
+  override def set(value: Boolean): Unit =
+    on = value
+
+  override def valueFromSetting: Boolean = on
+
+  override val suggestedValue: String = default.toString
+}
+
+final class IntegerSetting(
+                            @(Expose@annotation.meta.field)
+                            private var number: Int,
+                            private val suggestedLower: Int = 0,
+                            private val suggestedHigher: Int = 1) extends Setting[Int] {
+  override def valueFromSetting: Int = number
+
+  override def set(value: Int): Unit =
+    number = value
+
+  override val suggestedValue: String = s"[$suggestedLower, $suggestedHigher]"
+}
+
+
+final class FloatSetting(
+                          @(Expose@annotation.meta.field)
+                          private var number: Float,
+                          private val suggestedLower: Float = 0,
+                          private val suggestedHigher: Float = 1) extends Setting[Float] {
+  override def valueFromSetting: Float = number
+
+  override def set(value: Float): Unit =
+    number = value
+
+  override val suggestedValue: String = s"[$suggestedLower, $suggestedHigher]"
+}
+
+final class ListSetting(
+                         @(Expose@annotation.meta.field)
+                         private var choice: String,
+                         private val suggestedList: List[String]) extends Setting[String] {
+  override def valueFromSetting: String = choice
+
+  override def set(value: String): Unit =
+    choice = value
+
+  override val suggestedValue: String = suggestedList.toString()
+}
+
+final class EntitySelectorSetting(
+                                   @(Expose@annotation.meta.field)
+                                   var targetPlayer: Boolean = true,
+                                   @(Expose@annotation.meta.field)
+                                   var targetMobs: Boolean = false,
+                                   @(Expose@annotation.meta.field)
+                                   var targetAnimal: Boolean = false,
+                                   @(Expose@annotation.meta.field)
+                                   var noTargetInvisible: Boolean = false,
+                                   @(Expose@annotation.meta.field)
+                                   var noTargetDead: Boolean = true,
+                                 ) extends Setting[EntitySelector] {
+
+  private var selector = new EntitySelector(targetPlayer = targetPlayer,
+    targetMobs = targetMobs,
+    targetAnimal = targetAnimal,
+    noTargetDead = noTargetDead,
+    noTargetInvisible = noTargetInvisible)
+
+
+  override def onChange(): Unit = {
+    selector = new EntitySelector(targetPlayer = targetPlayer,
+      targetMobs = targetMobs,
+      targetAnimal = targetAnimal,
+      noTargetDead = noTargetDead,
+      noTargetInvisible = noTargetInvisible)
+  }
+
+  override protected def valueFromSetting: EntitySelector = selector
+
+  override def set(value: EntitySelector): Unit = {
+    selector = value
+    targetMobs = selector.targetMobs
+    targetPlayer = selector.targetPlayer
+    targetAnimal = selector.targetAnimal
+    noTargetDead = selector.noTargetDead
+    noTargetInvisible = selector.noTargetInvisible
+  }
+
+}
+
+final class ColorSetting(
+                          @(Expose@annotation.meta.field)
+                          private var red: Int = 100,
+                          @(Expose@annotation.meta.field)
+                          private var green: Int = 100,
+                          @(Expose@annotation.meta.field)
+                          private var blue: Int = 100,
+                          @(Expose@annotation.meta.field)
+                          private var alpha: Int = 128,
+                        ) extends Setting[Color] {
+
+  private var color = new Color(red, green, blue, alpha)
+
+  override protected def valueFromSetting: Color = color
+
+  override def set(value: Color): Unit = {
+    color = value
+    red = color.getRed
+    green = color.getGreen
+    blue = color.getBlue
+    alpha = color.getAlpha
+  }
+
+  override def onChange(): Unit = {
+    color = new Color(red, green, blue, alpha)
+  }
+}
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/utils/REPLHelper.scala b/src/unnamed-client/net/unnamed/utils/REPLHelper.scala
similarity index 100%
rename from src/minecraft/net/unnamed/utils/REPLHelper.scala
rename to src/unnamed-client/net/unnamed/utils/REPLHelper.scala
diff --git a/src/minecraft/net/unnamed/utils/ReflectionUtils.scala b/src/unnamed-client/net/unnamed/utils/ReflectionUtils.scala
similarity index 100%
rename from src/minecraft/net/unnamed/utils/ReflectionUtils.scala
rename to src/unnamed-client/net/unnamed/utils/ReflectionUtils.scala
diff --git a/src/unnamed-client/net/unnamed/utils/RenderUtils.scala b/src/unnamed-client/net/unnamed/utils/RenderUtils.scala
new file mode 100644
index 0000000..c2b0bf2
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/utils/RenderUtils.scala
@@ -0,0 +1,121 @@
+package net.unnamed.utils
+
+import net.minecraft.client.renderer.{GlStateManager, Tessellator, WorldRenderer}
+import net.minecraft.client.renderer.vertex.DefaultVertexFormats
+import net.minecraft.entity.Entity
+import net.minecraft.util.AxisAlignedBB
+import net.unnamed.utils.common.ifce.MinecraftInstance
+import org.lwjgl.opengl.GL11.{GL_BLEND, GL_DEPTH_TEST, GL_ONE_MINUS_SRC_ALPHA, GL_SRC_ALPHA, GL_TEXTURE_2D, glBlendFunc, glDepthMask, glDisable, glEnable, glLineWidth}
+
+import java.awt.Color
+
+case object RenderUtils extends MinecraftInstance {
+
+
+  // Skid from LB
+
+  def glColor(color: Color): Unit = {
+    val red = color.getRed / 255F
+    val green = color.getGreen / 255F
+    val blue = color.getBlue / 255F
+    val alpha = color.getAlpha / 255F
+    GlStateManager.color(red, green, blue, alpha)
+  }
+
+  def drawEntityBB(entity: Entity)(partialTicks: Float)(color: Color): Unit = {
+    val box = entity.getEntityBoundingBox.expand(.1, .1, .1)
+    drawAxisAlignedBB(box.offset(
+      (entity.posX - entity.lastTickPosX) * (partialTicks - 1),
+      (entity.posY - entity.lastTickPosY) * (partialTicks - 1),
+      (entity.posZ - entity.lastTickPosZ) * (partialTicks - 1)))(color)
+  }
+
+  def drawAxisAlignedBB(axisAlignedBB: AxisAlignedBB)(color: Color): Unit = {
+    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
+    glEnable(GL_BLEND)
+    glLineWidth(2F)
+    glDisable(GL_TEXTURE_2D)
+    glDisable(GL_DEPTH_TEST)
+    glDepthMask(false)
+    glColor(color)
+    drawFilledBox(axisAlignedBB)
+    GlStateManager.resetColor()
+    glEnable(GL_TEXTURE_2D)
+    glEnable(GL_DEPTH_TEST)
+    glDepthMask(true)
+    glDisable(GL_BLEND)
+  }
+
+  def drawFilledBox(aabb: AxisAlignedBB): Unit = {
+    val renderManager = mc.getRenderManager
+    val axisAlignedBB: AxisAlignedBB = aabb.offset(
+      -renderManager.renderPosX,
+      -renderManager.renderPosY,
+      -renderManager.renderPosZ
+    )
+
+    val tessellator = Tessellator.getInstance
+    val worldRenderer = tessellator.getWorldRenderer
+
+    worldRenderer.begin(7, DefaultVertexFormats.POSITION)
+
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.minX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.minZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.maxY, axisAlignedBB.maxZ).endVertex()
+    worldRenderer.pos(axisAlignedBB.maxX, axisAlignedBB.minY, axisAlignedBB.maxZ).endVertex()
+
+    tessellator.draw()
+  }
+
+}
diff --git a/src/minecraft/net/unnamed/utils/Rotation.scala b/src/unnamed-client/net/unnamed/utils/Rotation.scala
similarity index 91%
rename from src/minecraft/net/unnamed/utils/Rotation.scala
rename to src/unnamed-client/net/unnamed/utils/Rotation.scala
index 5dee056..97aec93 100644
--- a/src/minecraft/net/unnamed/utils/Rotation.scala
+++ b/src/unnamed-client/net/unnamed/utils/Rotation.scala
@@ -1,6 +1,5 @@
 package net.unnamed.utils
 
-import net.minecraft.client.settings.GameSettings
 import net.minecraft.entity.Entity
 import net.unnamed.utils.Rotation.getGCD
 import net.unnamed.utils.common.ifce.MinecraftInstance
@@ -37,7 +36,6 @@ object Rotation extends MinecraftInstance {
     f * f * f * 8.0F
   }
 
-  def fromEntity(entity: Entity): Rotation = {
+  def from(entity: Entity): Rotation =
     Rotation.apply(entity.rotationYaw, entity.rotationPitch)
-  }
 }
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/utils/common/ifce/ClientInstance.scala b/src/unnamed-client/net/unnamed/utils/common/ifce/ClientInstance.scala
similarity index 100%
rename from src/minecraft/net/unnamed/utils/common/ifce/ClientInstance.scala
rename to src/unnamed-client/net/unnamed/utils/common/ifce/ClientInstance.scala
diff --git a/src/minecraft/net/unnamed/utils/common/ifce/MinecraftInstance.scala b/src/unnamed-client/net/unnamed/utils/common/ifce/MinecraftInstance.scala
similarity index 100%
rename from src/minecraft/net/unnamed/utils/common/ifce/MinecraftInstance.scala
rename to src/unnamed-client/net/unnamed/utils/common/ifce/MinecraftInstance.scala
diff --git a/src/unnamed-client/net/unnamed/utils/common/ifce/Nameable.scala b/src/unnamed-client/net/unnamed/utils/common/ifce/Nameable.scala
new file mode 100644
index 0000000..15bca04
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/utils/common/ifce/Nameable.scala
@@ -0,0 +1,5 @@
+package net.unnamed.utils.common.ifce
+
+trait Nameable {
+  var name: String = this.toString
+}
diff --git a/src/minecraft/net/unnamed/utils/common/ifce/Toggleable.scala b/src/unnamed-client/net/unnamed/utils/common/ifce/Toggleable.scala
similarity index 100%
rename from src/minecraft/net/unnamed/utils/common/ifce/Toggleable.scala
rename to src/unnamed-client/net/unnamed/utils/common/ifce/Toggleable.scala
diff --git a/src/unnamed-client/net/unnamed/utils/target/selector/EntitySelector.scala b/src/unnamed-client/net/unnamed/utils/target/selector/EntitySelector.scala
new file mode 100644
index 0000000..8be4440
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/utils/target/selector/EntitySelector.scala
@@ -0,0 +1,34 @@
+package net.unnamed.utils.target.selector
+
+import net.minecraft.entity.Entity
+import net.minecraft.entity.monster.EntityMob
+import net.minecraft.entity.passive.EntityAnimal
+import net.minecraft.entity.player.EntityPlayer
+
+class EntitySelector(
+                      var targetPlayer: Boolean = true,
+                      var targetMobs: Boolean = false,
+                      var targetAnimal: Boolean = false,
+                      var noTargetInvisible: Boolean = false,
+                      var noTargetDead: Boolean = true,
+)  {
+  def isTarget(entity: Entity): Boolean = {
+
+    if (noTargetInvisible && entity.isInvisible)
+      return false
+
+    if (noTargetDead && entity.isDead)
+      return false
+
+    if (targetPlayer && entity.isInstanceOf[EntityPlayer])
+      return true
+
+    if (targetAnimal && entity.isInstanceOf[EntityAnimal])
+      return true
+
+    if (targetMobs && entity.isInstanceOf[EntityMob])
+      return true
+
+    false
+  }
+}
diff --git a/src/unnamed-client/net/unnamed/world/ClientSideWorld.scala b/src/unnamed-client/net/unnamed/world/ClientSideWorld.scala
new file mode 100644
index 0000000..ceab0da
--- /dev/null
+++ b/src/unnamed-client/net/unnamed/world/ClientSideWorld.scala
@@ -0,0 +1,75 @@
+package net.unnamed.world
+
+import net.minecraft.client.multiplayer.WorldClient
+import net.minecraft.entity.Entity
+import net.unnamed.Unnamed
+import net.unnamed.Unnamed.clientSideWorld
+import net.unnamed.event.unnamed.ActiveSettingsChangedEvent
+import net.unnamed.event.vanilla.WorldEvent
+import net.unnamed.event.{AlwaysActiveListener, Event, EventBus}
+import net.unnamed.scripting.scripts.{Script, Scripts}
+import net.unnamed.settings.Settings
+import net.unnamed.utils.common.ifce.MinecraftInstance
+import net.unnamed.world.inputcontrol.Cameras
+
+import java.io.File
+
+class ClientSideWorld(val world: WorldClient) extends MinecraftInstance {
+
+  val cameras = new Cameras
+
+  var moduleEvalContext: Script = null
+
+
+  {
+    reloadScripts()
+  }
+
+  private def reloadSettings(): Unit = {
+    reloadScripts()
+  }
+
+  private def reloadScripts(): Unit = {
+
+    if (moduleEvalContext != null)
+      moduleEvalContext.context().dispose()
+
+    moduleEvalContext = Script.loadFromFile(new File(Settings.activeDirectory,
+      "module-eval-context.js"))
+    moduleEvalContext.load()
+    Scripts.unLoadAll()
+    Scripts.loadAll()
+  }
+
+
+  var clientSideEntityId: Int = ClientSideWorld.clientSideEntityIdBegin
+
+  // TODO: find other solution that is not so hacky
+  def addClientEntity(entity: Entity): Unit = {
+    mc.theWorld.addEntityToWorld(clientSideEntityId, entity)
+    clientSideEntityId -= 1
+  }
+
+
+}
+
+case object ClientSideWorld {
+
+  val clientSideEntityIdBegin: Int = -10000000
+
+  def isClientSideEntity(entity: Entity): Boolean = {
+    entity.getEntityId <= clientSideEntityIdBegin
+  }
+
+  {
+    EventBus += new AlwaysActiveListener[WorldEvent]((event: WorldEvent) =>
+      if (event.worldClient == null)
+        Unnamed.clientSideWorld = None
+      else
+        Unnamed.clientSideWorld = Some(new ClientSideWorld(event.worldClient))
+    ) += new AlwaysActiveListener[ActiveSettingsChangedEvent]((_: ActiveSettingsChangedEvent) => {
+      if (Unnamed.clientSideWorld.isDefined)
+        Unnamed.clientSideWorld.get.reloadSettings()
+    })
+  }
+}
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/world/inputcontrol/CameraFixedOnEntity.scala b/src/unnamed-client/net/unnamed/world/inputcontrol/CameraFixedOnEntity.scala
similarity index 100%
rename from src/minecraft/net/unnamed/world/inputcontrol/CameraFixedOnEntity.scala
rename to src/unnamed-client/net/unnamed/world/inputcontrol/CameraFixedOnEntity.scala
diff --git a/src/minecraft/net/unnamed/world/inputcontrol/Cameras.scala b/src/unnamed-client/net/unnamed/world/inputcontrol/Cameras.scala
similarity index 75%
rename from src/minecraft/net/unnamed/world/inputcontrol/Cameras.scala
rename to src/unnamed-client/net/unnamed/world/inputcontrol/Cameras.scala
index b755fac..0ad43f4 100644
--- a/src/minecraft/net/unnamed/world/inputcontrol/Cameras.scala
+++ b/src/unnamed-client/net/unnamed/world/inputcontrol/Cameras.scala
@@ -22,4 +22,8 @@ class Cameras extends MinecraftInstance {
     else
       this.mc.getRenderViewEntity
   }
+
+  def shouldRenderThePlayer(partialTicks: Float): Boolean = {
+    activeCamera.isDefined && !mc.thePlayer.getEntityBoundingBox.isVecInside(activeCamera.get.getPositionEyes(partialTicks))
+  }
 }
diff --git a/src/minecraft/net/unnamed/world/inputcontrol/FreeCamera.scala b/src/unnamed-client/net/unnamed/world/inputcontrol/FreeCamera.scala
similarity index 100%
rename from src/minecraft/net/unnamed/world/inputcontrol/FreeCamera.scala
rename to src/unnamed-client/net/unnamed/world/inputcontrol/FreeCamera.scala
diff --git a/src/minecraft/net/unnamed/world/inputcontrol/PlayerMovementControl.scala b/src/unnamed-client/net/unnamed/world/inputcontrol/PlayerMovementControl.scala
similarity index 100%
rename from src/minecraft/net/unnamed/world/inputcontrol/PlayerMovementControl.scala
rename to src/unnamed-client/net/unnamed/world/inputcontrol/PlayerMovementControl.scala
diff --git a/src/minecraft/net/unnamed/world/schedule/Scheduler.scala b/src/unnamed-client/net/unnamed/world/schedule/Scheduler.scala
similarity index 100%
rename from src/minecraft/net/unnamed/world/schedule/Scheduler.scala
rename to src/unnamed-client/net/unnamed/world/schedule/Scheduler.scala
