diff --git a/mcp918.iml b/mcp918.iml
index f77ebaf..b40bf98 100644
--- a/mcp918.iml
+++ b/mcp918.iml
@@ -58,6 +58,7 @@
     <orderEntry type="library" name="codecwav-20101023" level="project" />
     <orderEntry type="library" name="commons-codec-1.9" level="project" />
     <orderEntry type="library" name="log4j-core-2.0-beta9" level="project" />
-    <orderEntry type="library" name="javax.vecmath" level="project" />
+    <orderEntry type="library" exported="" name="javax.vecmath" level="project" />
+    <orderEntry type="library" exported="" name="graalvm.js" level="project" />
   </component>
 </module>
\ No newline at end of file
diff --git a/src/minecraft/META-INF/MANIFEST.MF b/src/minecraft/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..b3cc4af
--- /dev/null
+++ b/src/minecraft/META-INF/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+Main-Class: Start
diff --git a/src/minecraft/net/minecraft/client/Minecraft.java b/src/minecraft/net/minecraft/client/Minecraft.java
index 795b08a..f501dcc 100644
--- a/src/minecraft/net/minecraft/client/Minecraft.java
+++ b/src/minecraft/net/minecraft/client/Minecraft.java
@@ -151,7 +151,6 @@ import net.minecraft.util.IThreadListener;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.MinecraftError;
 import net.minecraft.util.MouseHelper;
-import net.minecraft.util.MovementInputFromOptions;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.ResourceLocation;
@@ -169,7 +168,11 @@ import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
 import net.unnamed.Unnamed;
 import net.unnamed.event.EventBus;
+import net.unnamed.event.vanilla.ClientShutDownEvent;
+import net.unnamed.event.vanilla.CurrentGUIScreenUpdateEvent;
 import net.unnamed.event.vanilla.WorldEvent;
+import net.unnamed.world.inputcontrol.Cameras;
+import net.unnamed.world.inputcontrol.PlayerMovementControl;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
@@ -988,6 +991,12 @@ public class Minecraft implements IThreadListener, IPlayerUsage
             this.ingameGUI.getChatGUI().clearChatMessages();
         }
 
+        CurrentGUIScreenUpdateEvent event = new CurrentGUIScreenUpdateEvent(guiScreenIn);
+        EventBus.fireEventJ(event);
+
+        if (event.isCanceled())
+            return;
+
         this.currentScreen = (GuiScreen)guiScreenIn;
 
         if (guiScreenIn != null)
@@ -1116,6 +1125,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage
         this.mcProfiler.startSection("display");
         GlStateManager.enableTexture2D();
 
+        // TODO: inject here
         if (this.thePlayer != null && this.thePlayer.isEntityInsideOpaqueBlock())
         {
             this.gameSettings.thirdPersonView = 0;
@@ -1426,7 +1436,9 @@ public class Minecraft implements IThreadListener, IPlayerUsage
      */
     public void shutdown()
     {
-        this.running = false;
+        ClientShutDownEvent event = new ClientShutDownEvent();
+        EventBus.fireEventJ(event);
+        this.running = event.isCanceled();
     }
 
     /**
@@ -2395,7 +2407,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage
 
             this.thePlayer.preparePlayerToSpawn();
             worldClientIn.spawnEntityInWorld(this.thePlayer);
-            this.thePlayer.movementInput = new MovementInputFromOptions(this.gameSettings);
+            this.thePlayer.movementInput = new PlayerMovementControl(this.gameSettings);
             this.playerController.setPlayerCapabilities(this.thePlayer);
             this.renderViewEntity = this.thePlayer;
         }
@@ -2433,7 +2445,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage
         this.thePlayer.setClientBrand(s);
         this.theWorld.spawnEntityInWorld(this.thePlayer);
         this.playerController.flipPlayer(this.thePlayer);
-        this.thePlayer.movementInput = new MovementInputFromOptions(this.gameSettings);
+        this.thePlayer.movementInput = new PlayerMovementControl(this.gameSettings);
         this.thePlayer.setEntityId(i);
         this.playerController.setPlayerCapabilities(this.thePlayer);
         this.thePlayer.setReducedDebug(entityplayersp.hasReducedDebug());
@@ -3183,6 +3195,10 @@ public class Minecraft implements IThreadListener, IPlayerUsage
 
     public Entity getRenderViewEntity()
     {
+        if (Unnamed.clientSideWorld().isDefined()
+                && Unnamed.clientSideWorld().get().cameras().activeCamera().isDefined())
+            return Unnamed.clientSideWorld().get().cameras().activeCamera().get();
+
         return this.renderViewEntity;
     }
 
diff --git a/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java b/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java
index ef53142..82a5127 100644
--- a/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java
+++ b/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java
@@ -51,6 +51,7 @@ import net.minecraft.util.MovementInput;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.IInteractionObject;
 import net.minecraft.world.World;
+import net.unnamed.world.schedule.Scheduler;
 
 public class EntityPlayerSP extends AbstractClientPlayer
 {
@@ -705,7 +706,7 @@ public class EntityPlayerSP extends AbstractClientPlayer
 
     protected boolean isCurrentViewEntity()
     {
-        return this.mc.getRenderViewEntity() == this;
+        return this.mc.getRenderViewEntity() == this || Scheduler.isPlayerControlledByScheduler();
     }
 
     /**
diff --git a/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java b/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java
index ea32192..09b0d0b 100644
--- a/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java
+++ b/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java
@@ -209,7 +209,7 @@ import net.minecraft.world.WorldProviderSurface;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.storage.MapData;
-import net.unnamed.antiexploit.AntiScanFromResourcePackConfirm;
+import net.unnamed.modules.antiexploit.AntiScanFromResourcePackConfirm;
 import net.unnamed.event.EventBus;
 import net.unnamed.event.unnamed.ProbeFromServerEvent;
 import net.unnamed.event.unnamed.ServerProbes;
@@ -517,6 +517,9 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
      * Invoked when the server registers new proximate objects in your watchlist or when objects in your watchlist have
      * changed -> Registers any changes locally
      */
+
+    // TODO: figure out what this is responsible for
+    // and visualize this
     public void handleEntityMetadata(S1CPacketEntityMetadata packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
@@ -1669,6 +1672,8 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
         this.addToSendQueue(new C00PacketKeepAlive(packetIn.func_149134_c()));
     }
 
+
+    // TODO: important
     public void handlePlayerAbilities(S39PacketPlayerAbilities packetIn)
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
diff --git a/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java b/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
index 50c3a3b..debd63d 100644
--- a/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
+++ b/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
@@ -2,14 +2,6 @@ package net.minecraft.client.renderer;
 
 import com.google.common.base.Predicates;
 import com.google.gson.JsonSyntaxException;
-import java.io.IOException;
-import java.lang.reflect.Field;
-import java.nio.FloatBuffer;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.List;
-import java.util.Random;
-import java.util.concurrent.Callable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.material.Material;
@@ -22,8 +14,6 @@ import net.minecraft.client.gui.MapItemRenderer;
 import net.minecraft.client.gui.ScaledResolution;
 import net.minecraft.client.multiplayer.WorldClient;
 import net.minecraft.client.particle.EffectRenderer;
-import net.minecraft.client.renderer.EntityRenderer$1;
-import net.minecraft.client.renderer.EntityRenderer$2;
 import net.minecraft.client.renderer.culling.ClippingHelperImpl;
 import net.minecraft.client.renderer.culling.Frustum;
 import net.minecraft.client.renderer.texture.DynamicTexture;
@@ -53,31 +43,14 @@ import net.minecraft.inventory.IInventory;
 import net.minecraft.item.ItemStack;
 import net.minecraft.potion.Potion;
 import net.minecraft.server.integrated.IntegratedServer;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.ChatComponentText;
-import net.minecraft.util.EntitySelectors;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.EnumWorldBlockLayer;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.MouseFilter;
-import net.minecraft.util.MovingObjectPosition;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.Vec3;
+import net.minecraft.util.*;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.biome.BiomeGenBase;
-import optifine.Config;
-import optifine.CustomColors;
-import optifine.Lagometer;
-import optifine.RandomMobs;
-import optifine.Reflector;
-import optifine.ReflectorForge;
-import optifine.TextureUtils;
-
+import net.unnamed.Unnamed;
+import net.unnamed.world.inputcontrol.Cameras;
+import optifine.*;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.input.Mouse;
@@ -89,6 +62,15 @@ import org.lwjgl.util.glu.Project;
 import shadersmod.client.Shaders;
 import shadersmod.client.ShadersRender;
 
+import java.io.IOException;
+import java.lang.reflect.Field;
+import java.nio.FloatBuffer;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+import java.util.Random;
+import java.util.concurrent.Callable;
+
 public class EntityRenderer implements IResourceManagerReloadListener
 {
     private static final Logger logger = LogManager.getLogger();
@@ -454,7 +436,10 @@ public class EntityRenderer implements IResourceManagerReloadListener
      */
     public void getMouseOver(float partialTicks)
     {
-        Entity entity = this.mc.getRenderViewEntity();
+        Entity entity =
+                Unnamed.clientSideWorld().isDefined() ?
+                Unnamed.clientSideWorld().get().cameras().getPlayerOrSupposedToBeViewEntity() :
+                        mc.getRenderViewEntity();
 
         if (entity != null && this.mc.theWorld != null)
         {
@@ -492,7 +477,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
             this.pointedEntity = null;
             Vec3 vec33 = null;
             float f = 1.0F;
-            List list = this.mc.theWorld.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0).expand((double)f, (double)f, (double)f), Predicates.and(EntitySelectors.NOT_SPECTATING, new EntityRenderer$1(this)));
+            List list = this.mc.theWorld.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0).expand((double)f, (double)f, (double)f), Predicates.and(EntitySelectors.NOT_SPECTATING, new EntityRendererPred(this)));
             double d2 = d1;
 
             for (int i = 0; i < list.size(); ++i)
@@ -1294,12 +1279,18 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 this.smoothCamPartialTicks = p_181560_1_;
                 f2 = this.smoothCamFilterX * f4;
                 f3 = this.smoothCamFilterY * f4;
+
+                if (Unnamed.clientSideWorld().get().cameras().activeCamera().isDefined())
+                    Unnamed.clientSideWorld().get().cameras().activeCamera().get().setAngles(f2, f3 * (float) b0);
                 this.mc.thePlayer.setAngles(f2, f3 * (float)b0);
             }
             else
             {
                 this.smoothCamYaw = 0.0F;
                 this.smoothCamPitch = 0.0F;
+
+                if (Unnamed.clientSideWorld().get().cameras().activeCamera().isDefined())
+                    Unnamed.clientSideWorld().get().cameras().activeCamera().get().setAngles(f2, f3 * (float) b0);
                 this.mc.thePlayer.setAngles(f2, f3 * (float)b0);
             }
         }
@@ -1393,7 +1384,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 {
                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
                     CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
-                    crashreportcategory.addCrashSectionCallable("Screen name", new EntityRenderer$2(this));
+                    crashreportcategory.addCrashSectionCallable("Screen name", new EntityRendererCallable(this));
                     crashreportcategory.addCrashSectionCallable("Mouse location", new Callable()
                     {
                         private static final String __OBFID = "CL_00000950";
@@ -1439,7 +1430,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
         }
         else
         {
-            Entity entity = this.mc.getRenderViewEntity();
+            Entity entity = Unnamed.clientSideWorld().get().cameras().getPlayerOrSupposedToBeViewEntity();
             boolean flag = entity instanceof EntityPlayer && !this.mc.gameSettings.hideGUI;
 
             if (flag && !((EntityPlayer)entity).capabilities.allowEdit)
diff --git a/src/minecraft/net/minecraft/client/renderer/EntityRenderer$2.java b/src/minecraft/net/minecraft/client/renderer/EntityRendererCallable.java
similarity index 79%
rename from src/minecraft/net/minecraft/client/renderer/EntityRenderer$2.java
rename to src/minecraft/net/minecraft/client/renderer/EntityRendererCallable.java
index a3c979a..39e4788 100644
--- a/src/minecraft/net/minecraft/client/renderer/EntityRenderer$2.java
+++ b/src/minecraft/net/minecraft/client/renderer/EntityRendererCallable.java
@@ -3,12 +3,12 @@ package net.minecraft.client.renderer;
 import java.util.concurrent.Callable;
 import net.minecraft.client.Minecraft;
 
-class EntityRenderer$2 implements Callable
+class EntityRendererCallable implements Callable
 {
     final EntityRenderer field_90025_c;
     private static final String __OBFID = "CL_00000948";
 
-    EntityRenderer$2(EntityRenderer p_i46419_1_)
+    EntityRendererCallable(EntityRenderer p_i46419_1_)
     {
         this.field_90025_c = p_i46419_1_;
     }
diff --git a/src/minecraft/net/minecraft/client/renderer/EntityRenderer$1.java b/src/minecraft/net/minecraft/client/renderer/EntityRendererPred.java
similarity index 81%
rename from src/minecraft/net/minecraft/client/renderer/EntityRenderer$1.java
rename to src/minecraft/net/minecraft/client/renderer/EntityRendererPred.java
index 1171b90..47c283c 100644
--- a/src/minecraft/net/minecraft/client/renderer/EntityRenderer$1.java
+++ b/src/minecraft/net/minecraft/client/renderer/EntityRendererPred.java
@@ -3,11 +3,11 @@ package net.minecraft.client.renderer;
 import com.google.common.base.Predicate;
 import net.minecraft.entity.Entity;
 
-class EntityRenderer$1 implements Predicate
+class EntityRendererPred implements Predicate
 {
     final EntityRenderer field_90032_a;
 
-    EntityRenderer$1(EntityRenderer p_i1243_1_)
+    EntityRendererPred(EntityRenderer p_i1243_1_)
     {
         this.field_90032_a = p_i1243_1_;
     }
diff --git a/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java b/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
index 1ac5166..e3ba7ac 100644
--- a/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
+++ b/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
@@ -90,6 +90,8 @@ import net.minecraft.world.IWorldAccess;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.Chunk;
+import net.unnamed.Unnamed;
+import net.unnamed.world.inputcontrol.Cameras;
 import optifine.ChunkUtils;
 import optifine.CloudRenderer;
 import optifine.Config;
@@ -782,8 +784,10 @@ public class RenderGlobal implements IWorldAccess, IResourceManagerReloadListene
 
                                 boolean flag6 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
 
-                                if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag6) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(new BlockPos(entity2))))
+                                if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag6 || (Unnamed.clientSideWorld().get().cameras().activeCamera().isDefined() && entity == mc.thePlayer))
+                                        && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(new BlockPos(entity2))))
                                 {
+
                                     ++this.countEntitiesRendered;
 
                                     if (entity2.getClass() == EntityItemFrame.class)
diff --git a/src/minecraft/net/minecraft/entity/Entity.java b/src/minecraft/net/minecraft/entity/Entity.java
index 5626546..30bf1dc 100644
--- a/src/minecraft/net/minecraft/entity/Entity.java
+++ b/src/minecraft/net/minecraft/entity/Entity.java
@@ -46,6 +46,8 @@ import net.minecraft.util.Vec3;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import net.unnamed.event.EventBus;
+import net.unnamed.event.vanilla.MovementCalculatePreEvent;
 
 public abstract class Entity implements ICommandSender
 {
@@ -1211,8 +1213,19 @@ public abstract class Entity implements ICommandSender
     /**
      * Used in both water and by flying objects
      */
+
+    // TODO: used for calculate motion, use for Camera control
     public void moveFlying(float strafe, float forward, float friction)
     {
+        MovementCalculatePreEvent event = new MovementCalculatePreEvent(this, forward, strafe, friction);
+        EventBus.fireEventJ(event);
+        if (event.isCanceled())
+            return;
+
+        strafe = event.strafe();
+        forward = event.forward();
+        friction = event.friction();
+
         float f = strafe * strafe + forward * forward;
 
         if (f >= 1.0E-4F)
diff --git a/src/minecraft/net/unnamed/Unnamed.scala b/src/minecraft/net/unnamed/Unnamed.scala
index 1cc8d1e..87fd683 100644
--- a/src/minecraft/net/unnamed/Unnamed.scala
+++ b/src/minecraft/net/unnamed/Unnamed.scala
@@ -1,8 +1,11 @@
 package net.unnamed
 
-import net.unnamed.event.EventBus
-import net.unnamed.event.unnamed.UnnamedListeners
+import net.unnamed.event.unnamed.UnnamedEventsGen
+import net.unnamed.event.vanilla.WorldEvent
+import net.unnamed.event.{AlwaysActiveListener, EventBus}
 import net.unnamed.modules.Modules
+import net.unnamed.settings.Settings
+import net.unnamed.world.ClientSideWorld
 
 object Unnamed {
   val name = "unnamed"
@@ -10,9 +13,20 @@ object Unnamed {
 
   val eventBus: EventBus.type = EventBus
 
+  var clientSideWorld: Option[ClientSideWorld] = None
+
   val launch: Unit = {
-    UnnamedListeners
+
+    EventBus += new AlwaysActiveListener[WorldEvent]((event: WorldEvent) => {
+      if (event.worldClient != null)
+        clientSideWorld = Some(new ClientSideWorld(event.worldClient))
+    })
+
+    UnnamedEventsGen
     Modules
+    Settings
 
+    Settings.loadSettings()
+    Settings.changeActiveLocalSetting()
   }
 }
diff --git a/src/minecraft/net/unnamed/antiexploit/AntiScanFromResourcePackConfirm.scala b/src/minecraft/net/unnamed/antiexploit/AntiScanFromResourcePackConfirm.scala
deleted file mode 100644
index 7a83f5d..0000000
--- a/src/minecraft/net/unnamed/antiexploit/AntiScanFromResourcePackConfirm.scala
+++ /dev/null
@@ -1,9 +0,0 @@
-package net.unnamed.antiexploit
-
-import net.unnamed.utils.common.interface.Toggleable
-
-object AntiScanFromResourcePackConfirm extends Toggleable {
-  {
-    on()
-  }
-}
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/cheats/packet/modification/Velocity.scala b/src/minecraft/net/unnamed/cheats/packet/modification/Velocity.scala
index 369d758..bd77127 100644
--- a/src/minecraft/net/unnamed/cheats/packet/modification/Velocity.scala
+++ b/src/minecraft/net/unnamed/cheats/packet/modification/Velocity.scala
@@ -1,18 +1,18 @@
 package net.unnamed.cheats.packet.modification
 
-import net.unnamed.event.unnamed.PlayerKnockBackEvent
-import net.unnamed.utils.common.interface.MinecraftInstance
+import net.unnamed.event.unnamed.PlayerGotKnockedBackEvent
+import net.unnamed.utils.common.ifce.MinecraftInstance
 
 import javax.vecmath.Vector2d
 
 
 object Velocity extends MinecraftInstance {
 
-  def cancelPlayerKnockBackEvent(event: PlayerKnockBackEvent): Unit = {
+  def cancelPlayerKnockBackEvent(event: PlayerGotKnockedBackEvent): Unit = {
     event.cancel()
   }
 
-  def modifyKnockBackBy(event: PlayerKnockBackEvent)(byVertical: Double)(byHorizontal: Vector2d): Unit = {
+  def modifyKnockBackBy(event: PlayerGotKnockedBackEvent)(byVertical: Double)(byHorizontal: Vector2d): Unit = {
     val packet = event.packet
 
     packet.motionY = (packet.motionY * byVertical).toInt
diff --git a/src/minecraft/net/unnamed/event/EventAlias.scala b/src/minecraft/net/unnamed/event/EventAlias.scala
new file mode 100644
index 0000000..0c0c8a3
--- /dev/null
+++ b/src/minecraft/net/unnamed/event/EventAlias.scala
@@ -0,0 +1,7 @@
+package net.unnamed.event
+
+import net.unnamed.event.unnamed.PlayerMovementCalculatePreEvent
+
+case object EventAlias {
+  type StrafeEvent = PlayerMovementCalculatePreEvent
+}
diff --git a/src/minecraft/net/unnamed/event/unnamed/PlayerKnockBackEvent.scala b/src/minecraft/net/unnamed/event/unnamed/PlayerGotKnockedBackEvent.scala
similarity index 60%
rename from src/minecraft/net/unnamed/event/unnamed/PlayerKnockBackEvent.scala
rename to src/minecraft/net/unnamed/event/unnamed/PlayerGotKnockedBackEvent.scala
index 8e7fe18..867667b 100644
--- a/src/minecraft/net/unnamed/event/unnamed/PlayerKnockBackEvent.scala
+++ b/src/minecraft/net/unnamed/event/unnamed/PlayerGotKnockedBackEvent.scala
@@ -3,4 +3,4 @@ package net.unnamed.event.unnamed
 import net.minecraft.network.play.server.S12PacketEntityVelocity
 import net.unnamed.event.CancelableEvent
 
-case class PlayerKnockBackEvent(packet: S12PacketEntityVelocity) extends CancelableEvent
+case class PlayerGotKnockedBackEvent(packet: S12PacketEntityVelocity) extends CancelableEvent
diff --git a/src/minecraft/net/unnamed/event/unnamed/PlayerMovementCalculatePreEvent.scala b/src/minecraft/net/unnamed/event/unnamed/PlayerMovementCalculatePreEvent.scala
new file mode 100644
index 0000000..bba1db6
--- /dev/null
+++ b/src/minecraft/net/unnamed/event/unnamed/PlayerMovementCalculatePreEvent.scala
@@ -0,0 +1,7 @@
+package net.unnamed.event.unnamed
+
+import net.unnamed.event.CancelableEvent
+
+case class PlayerMovementCalculatePreEvent(var forward: java.lang.Float,
+                                           var strafe: java.lang.Float,
+                                           var friction: java.lang.Float) extends CancelableEvent
diff --git a/src/minecraft/net/unnamed/event/unnamed/UnnamedEventsGen.scala b/src/minecraft/net/unnamed/event/unnamed/UnnamedEventsGen.scala
new file mode 100644
index 0000000..c26f6b1
--- /dev/null
+++ b/src/minecraft/net/unnamed/event/unnamed/UnnamedEventsGen.scala
@@ -0,0 +1,46 @@
+package net.unnamed.event.unnamed
+
+import net.minecraft.network.play.client.C0FPacketConfirmTransaction
+import net.minecraft.network.play.server.{S12PacketEntityVelocity, S23PacketBlockChange, S32PacketConfirmTransaction}
+import net.unnamed.event.vanilla.{MovementCalculatePreEvent, PacketEvent}
+import net.unnamed.event.{AlwaysActiveListener, Event, EventBus}
+import net.unnamed.utils.common.ifce.MinecraftInstance
+
+object UnnamedEventsGen extends MinecraftInstance {
+  {
+    EventBus +=
+      new AlwaysActiveListener[PacketEvent](
+        (event: PacketEvent) => event.packet match {
+
+          case velocityPacket: S12PacketEntityVelocity =>
+            if (velocityPacket.getEntityID == mc.thePlayer.getEntityId) {
+              val kbEvent = PlayerGotKnockedBackEvent(velocityPacket)
+              EventBus.fireEvent(kbEvent)
+              if (kbEvent.isCanceled)
+                event.cancel()
+            }
+
+          case transactionPacket: S32PacketConfirmTransaction =>
+            EventBus.fireEvent(ProbeFromServerEvent(ServerProbes.TRANSACTION_PING,
+              s"Window id: ${transactionPacket.getWindowId}" +
+                s"Action Number: ${transactionPacket.getActionNumber}" +
+                s"Should Send C0FPacketConfirmTransaction: ${!transactionPacket.func_148888_e()}"))
+
+          case _ =>
+        }) +=
+      new AlwaysActiveListener[MovementCalculatePreEvent]((event: MovementCalculatePreEvent) =>
+        if (event.entity == mc.thePlayer) {
+          val strafeEvent = PlayerMovementCalculatePreEvent(event.forward, event.strafe, event.friction)
+          EventBus.fireEvent(strafeEvent)
+
+          if (strafeEvent.isCanceled)
+            event.cancel()
+          else {
+            event.forward = strafeEvent.forward
+            event.strafe = strafeEvent.strafe
+            event.friction = strafeEvent.friction
+          }
+        }
+      )
+  }
+}
diff --git a/src/minecraft/net/unnamed/event/unnamed/UnnamedListeners.scala b/src/minecraft/net/unnamed/event/unnamed/UnnamedListeners.scala
deleted file mode 100644
index ee521f3..0000000
--- a/src/minecraft/net/unnamed/event/unnamed/UnnamedListeners.scala
+++ /dev/null
@@ -1,34 +0,0 @@
-package net.unnamed.event.unnamed
-
-import net.minecraft.network.play.client.C0FPacketConfirmTransaction
-import net.minecraft.network.play.server.{S12PacketEntityVelocity, S23PacketBlockChange, S32PacketConfirmTransaction}
-import net.unnamed.event.vanilla.PacketEvent
-import net.unnamed.event.{AlwaysActiveListener, EventBus}
-import net.unnamed.utils.common.interface.MinecraftInstance
-
-object UnnamedListeners extends MinecraftInstance {
-  {
-    EventBus +=
-      new AlwaysActiveListener[PacketEvent](
-        (event: PacketEvent) => event.packet match {
-
-          case velocityPacket: S12PacketEntityVelocity =>
-            if (velocityPacket.getEntityID == mc.thePlayer.getEntityId) {
-              val kbEvent = PlayerKnockBackEvent(velocityPacket)
-              EventBus.fireEvent(kbEvent)
-              if (kbEvent.isCanceled)
-                event.cancel()
-            }
-
-          case transactionPacket: S32PacketConfirmTransaction =>
-            EventBus.fireEvent(ProbeFromServerEvent(ServerProbes.TRANSACTION_PING,
-              s"Window id: ${transactionPacket.getWindowId}" +
-                s"Action Number: ${transactionPacket.getActionNumber}" +
-                s"Send C0FPacketConfirmTransaction: ${!transactionPacket.func_148888_e()}"))
-
-          case _ =>
-        })
-
-
-  }
-}
diff --git a/src/minecraft/net/unnamed/event/vanilla/ClientShutDownEvent.scala b/src/minecraft/net/unnamed/event/vanilla/ClientShutDownEvent.scala
new file mode 100644
index 0000000..66d3169
--- /dev/null
+++ b/src/minecraft/net/unnamed/event/vanilla/ClientShutDownEvent.scala
@@ -0,0 +1,5 @@
+package net.unnamed.event.vanilla
+
+import net.unnamed.event.CancelableEvent
+
+case class ClientShutDownEvent() extends CancelableEvent
diff --git a/src/minecraft/net/unnamed/event/vanilla/CurrentGUIScreenUpdateEvent.scala b/src/minecraft/net/unnamed/event/vanilla/CurrentGUIScreenUpdateEvent.scala
new file mode 100644
index 0000000..e75382d
--- /dev/null
+++ b/src/minecraft/net/unnamed/event/vanilla/CurrentGUIScreenUpdateEvent.scala
@@ -0,0 +1,6 @@
+package net.unnamed.event.vanilla
+
+import net.minecraft.client.gui.GuiScreen
+import net.unnamed.event.CancelableEvent
+
+case class CurrentGUIScreenUpdateEvent(newScreen: GuiScreen) extends CancelableEvent
diff --git a/src/minecraft/net/unnamed/event/vanilla/MovementCalculatePreEvent.scala b/src/minecraft/net/unnamed/event/vanilla/MovementCalculatePreEvent.scala
new file mode 100644
index 0000000..3973c83
--- /dev/null
+++ b/src/minecraft/net/unnamed/event/vanilla/MovementCalculatePreEvent.scala
@@ -0,0 +1,10 @@
+package net.unnamed.event.vanilla
+
+import net.minecraft.entity.Entity
+import net.unnamed.event.CancelableEvent
+
+case class MovementCalculatePreEvent(entity: Entity,
+                                     var forward: java.lang.Float,
+                                     var strafe: java.lang.Float,
+                                     var friction: java.lang.Float) extends CancelableEvent
+
diff --git a/src/minecraft/net/unnamed/modules/Module.scala b/src/minecraft/net/unnamed/modules/Module.scala
index 173d436..1881b6f 100644
--- a/src/minecraft/net/unnamed/modules/Module.scala
+++ b/src/minecraft/net/unnamed/modules/Module.scala
@@ -2,30 +2,58 @@ package net.unnamed.modules
 
 import net.unnamed.event.unnamed.ModuleToggleEvent
 import net.unnamed.event.{Event, EventBus, Listener}
-import net.unnamed.utils.common.interface.{MinecraftInstance, Toggleable}
+import net.unnamed.settings.Settings.ISaveLocal
+import net.unnamed.settings.setting.SaveThisAlso
+import net.unnamed.utils.common.ifce.{ClientInstance, MinecraftInstance, Toggleable}
 
 import scala.reflect.ClassTag
 
 
 class Module(
-              val displayName: String = "Module Name",
               val description: String = "As the name suggests"
-            ) extends Toggleable with MinecraftInstance {
+            ) extends Toggleable with ClientInstance with MinecraftInstance with ISaveLocal {
 
   {
   }
 
+  @SaveThisAlso
+  var state: Boolean = false
+
+  override def on(): Unit = {
+    if (!state)
+      toggle()
+  }
+
+  override def off(): Unit = {
+    if (state)
+      toggle()
+  }
+
+  override def toggle(): Unit = {
+    state = !state
+    onToggle()
+  }
+
+  override def isOn: Boolean = state
+
+
+  val moduleName: String = getClass.getSimpleName
+
   def onEnable(): Unit = {}
 
   def onDisable(): Unit = {}
 
 
+  val enableOnJoin: Boolean = true
+
   override def onToggle(): Unit = {
-    if (mc.theWorld != null)
-      if (isOn)
-        onDisable()
-      else
-        onEnable()
+    if (mc.theWorld == null)
+      return
+
+    if (isOn)
+      onEnable()
+    else
+      onDisable()
 
     EventBus.fireEvent(ModuleToggleEvent(this))
   }
diff --git a/src/minecraft/net/unnamed/modules/Modules.scala b/src/minecraft/net/unnamed/modules/Modules.scala
index 97343b1..a990c93 100644
--- a/src/minecraft/net/unnamed/modules/Modules.scala
+++ b/src/minecraft/net/unnamed/modules/Modules.scala
@@ -1,8 +1,11 @@
 package net.unnamed.modules
 
-import net.unnamed.event.vanilla.WorldEvent
-import net.unnamed.event.{Event, EventBus, Listener}
-import net.unnamed.modules.render.FullBright
+import net.minecraft.client.gui.GuiIngameMenu
+import net.unnamed.event.vanilla.{CurrentGUIScreenUpdateEvent, WorldEvent}
+import net.unnamed.event.{AlwaysActiveListener, Event, EventBus, Listener}
+import net.unnamed.modules.antiexploit.AntiScanFromResourcePackConfirm
+import net.unnamed.modules.render.{FreeCam, FullBright}
+import net.unnamed.settings.Settings
 
 case object Modules {
   var modules: List[Module] = Nil
@@ -10,19 +13,34 @@ case object Modules {
 
   {
     modules ::= FullBright
+    modules ::= AntiScanFromResourcePackConfirm
+    modules ::= FreeCam
 
 
-    // TODO: load modules config and enable on world join
-    EventBus += new Listener[WorldEvent]() {
-      override def isActive: Boolean = true
-
-      override def callback(event: WorldEvent): Unit = {
+    EventBus +=
+      new AlwaysActiveListener[WorldEvent]((event: WorldEvent) => {
         if (event.worldClient != null)
-          modules.foreach((module: Module) => if (module.isOn) module.onEnable())
+          for (module <- modules) {
+
+            module.loadSetting()
+
+            if (!module.enableOnJoin)
+              module.off()
+
+            if (module.isOn)
+              module.onEnable()
+          }
         else
-          modules.foreach((module: Module) => if (!module.isOn) module.onDisable())
-      }
-    }
+          for (module <- modules) {
+            if (module.isOn) module.onDisable()
+          }
+      }) +=
+      new AlwaysActiveListener[CurrentGUIScreenUpdateEvent]((event: CurrentGUIScreenUpdateEvent) => {
+        if (event.newScreen.isInstanceOf[GuiIngameMenu]) {
+          for (module <- modules)
+            module.saveSetting()
+        }
+      })
   }
 
   // TODO: mutex
diff --git a/src/minecraft/net/unnamed/modules/antiexploit/AntiScanFromResourcePackConfirm.scala b/src/minecraft/net/unnamed/modules/antiexploit/AntiScanFromResourcePackConfirm.scala
new file mode 100644
index 0000000..f444d18
--- /dev/null
+++ b/src/minecraft/net/unnamed/modules/antiexploit/AntiScanFromResourcePackConfirm.scala
@@ -0,0 +1,5 @@
+package net.unnamed.modules.antiexploit
+
+import net.unnamed.modules.Module
+
+object AntiScanFromResourcePackConfirm extends Module
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/modules/render/FreeCam.scala b/src/minecraft/net/unnamed/modules/render/FreeCam.scala
new file mode 100644
index 0000000..123f1e7
--- /dev/null
+++ b/src/minecraft/net/unnamed/modules/render/FreeCam.scala
@@ -0,0 +1,22 @@
+package net.unnamed.modules.render
+
+import net.unnamed.modules.Module
+import net.unnamed.settings.setting.FloatSetting
+import net.unnamed.world.inputcontrol.{Cameras, FreeCamera}
+
+object FreeCam extends Module {
+
+  val flySpeed = new FloatSetting(.1f)
+
+  override val enableOnJoin: Boolean = false
+
+  override def onEnable(): Unit = {
+    val freeCam = new FreeCamera()
+    freeCam.capabilities.setFlySpeed(flySpeed.get)
+    clientSideWorld.cameras.setActiveCamera(Some(freeCam))
+  }
+
+  override def onDisable(): Unit = {
+    clientSideWorld.cameras.activeCamera = None
+  }
+}
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/modules/render/FullBright.scala b/src/minecraft/net/unnamed/modules/render/FullBright.scala
index 9a33548..c619bcf 100644
--- a/src/minecraft/net/unnamed/modules/render/FullBright.scala
+++ b/src/minecraft/net/unnamed/modules/render/FullBright.scala
@@ -2,11 +2,7 @@ package net.unnamed.modules.render
 
 import net.unnamed.modules.Module
 
-// TODO: somehow make default value the name of the class
-object FullBright extends Module(displayName = "FullBright") {
-  {
-    on()
-  }
+object FullBright extends Module {
 
   var originalGama = 0f
 
diff --git a/src/minecraft/net/unnamed/settings/Settings.scala b/src/minecraft/net/unnamed/settings/Settings.scala
new file mode 100644
index 0000000..ed3a416
--- /dev/null
+++ b/src/minecraft/net/unnamed/settings/Settings.scala
@@ -0,0 +1,242 @@
+package net.unnamed.settings
+
+import com.google.gson._
+import com.google.gson.annotations.Expose
+import net.minecraft.client.gui.GuiIngameMenu
+import net.unnamed.Unnamed
+import net.unnamed.event.vanilla.{ClientShutDownEvent, CurrentGUIScreenUpdateEvent}
+import net.unnamed.event.{AlwaysActiveListener, EventBus}
+import net.unnamed.settings.setting.{SaveThisAlso, Setting, SettingDeserializer, SettingSerializer}
+import net.unnamed.utils.ReflectionUtils
+import net.unnamed.utils.common.ifce.MinecraftInstance
+
+import java.io.{BufferedReader, File, FileReader, FileWriter}
+import java.lang.reflect.Field
+import java.util
+import scala.collection.convert.ImplicitConversions._
+import scala.collection.mutable
+
+object Settings extends MinecraftInstance {
+
+  {
+    EventBus += new AlwaysActiveListener[ClientShutDownEvent]((_: ClientShutDownEvent) => saveSettings())
+    EventBus += new AlwaysActiveListener[CurrentGUIScreenUpdateEvent]((event: CurrentGUIScreenUpdateEvent) =>
+      if (event.newScreen.isInstanceOf[GuiIngameMenu])
+        saveSettings()
+    )
+  }
+
+
+  val settingsDirectory = new File(mc.mcDataDir, Unnamed.name)
+  val globalSettings: mutable.Map[String, List[ISaveGlobal]] = new mutable.HashMap[String, List[ISaveGlobal]]().withDefaultValue(Nil)
+
+  var activeDirectory = new File(settingsDirectory, "default")
+  var activeSettings: mutable.Map[String, List[ISaveLocal]] = new mutable.HashMap[String, List[ISaveLocal]]().withDefaultValue(Nil)
+
+
+  val serializer: Gson = {
+    val builder = new GsonBuilder()
+
+    ReflectionUtils.getAllSubClassInPackage(getClass.getPackage, classOf[Setting[_]]).foreach((value: Class[Setting[_]]) => {
+      builder.registerTypeAdapter(value, SettingSerializer)
+      builder.registerTypeAdapter(value, SettingDeserializer)
+    })
+
+    builder
+      .excludeFieldsWithoutExposeAnnotation()
+      .setPrettyPrinting()
+      .create()
+  }
+
+  val parser = new JsonParser()
+
+  trait ISave {
+    val settingName: String = getClass.getSimpleName
+    val locatedPackage: Package = getClass.getPackage
+
+    var settings = new JsonArray
+
+    def loadSetting(): Unit = {
+      for (jsonElement <- settings) {
+
+        val jsonObject = jsonElement.getAsJsonObject
+        jsonObject.entrySet().foreach((value: util.Map.Entry[String, JsonElement]) => {
+
+          val settingField = ReflectionUtils.getAllField(this)
+            .find((field: Field) => field.getName == value.getKey)
+            .orNull
+
+          if (!settingField.isAccessible)
+            settingField.setAccessible(true)
+
+          val originalSetting = settingField.get(this)
+          val deserializedSetting = serializer.fromJson(value.getValue, originalSetting.getClass)
+
+          if (settingField.isAnnotationPresent(classOf[SaveThisAlso]))
+            settingField.set(this, deserializedSetting)
+          else
+            ReflectionUtils.getAllField(originalSetting).foreach((field: Field) => {
+
+              if (field.isAnnotationPresent(classOf[Expose])) {
+
+                if (!field.isAccessible)
+                  field.setAccessible(true)
+
+                field.set(originalSetting, field.get(deserializedSetting))
+              }
+            })
+        })
+      }
+    }
+
+    def saveSetting(): Unit = {
+      settings = new JsonArray
+      ReflectionUtils.getAllField(this).filter((field: Field) => {
+        if (!field.isAccessible)
+          field.setAccessible(true)
+
+        classOf[Setting[_]].isAssignableFrom(field.getType) ||
+          field.isAnnotationPresent(classOf[SaveThisAlso])
+      }
+      )
+        .foreach((field: Field) => {
+
+          val setting = field.get(this)
+
+          val jsonObject = new JsonObject
+          jsonObject.add(field.getName, serializer.toJsonTree(setting))
+          settings.add(jsonObject)
+        })
+
+    }
+
+    def getConfigFileName: String =
+      locatedPackage.getName + ".json"
+  }
+
+  trait ISaveLocal extends ISave {
+
+    {
+      activeSettings(getConfigFileName) ::= this
+    }
+
+  }
+
+  trait ISaveGlobal extends ISave {
+
+    {
+      globalSettings(getConfigFileName) ::= this
+    }
+
+  }
+
+  def loadSettings(): Unit = {
+    if (!settingsDirectory.exists())
+      settingsDirectory.mkdir()
+
+    for (file <- settingsDirectory.listFiles()) {
+      if (file.isDirectory)
+        return
+
+      val settingFileName = file.getName
+
+      val fileContent = parser.parse(new BufferedReader(new FileReader(file)))
+      for (element <- fileContent.getAsJsonArray) {
+        val jsonObject = element.getAsJsonObject
+
+        val save = globalSettings(settingFileName).find((global: ISaveGlobal) =>
+          global.settingName == jsonObject.get("settingName").getAsString)
+
+        if (save.isDefined)
+          save.get.settings = jsonObject.get("settings").getAsJsonArray
+
+      }
+
+    }
+  }
+
+  def changeActiveLocalSetting(settingName: String = "default"): Unit = {
+    activeDirectory = new File(settingsDirectory, settingName)
+
+
+    if (!activeDirectory.exists())
+      activeDirectory.mkdir()
+
+    for (file <- activeDirectory.listFiles()) {
+      val settingFileName = file.getName
+
+      val fileContent = parser.parse(new BufferedReader(new FileReader(file)))
+      for (element <- fileContent.getAsJsonArray) {
+        val jsonObject = element.getAsJsonObject
+
+        val save = activeSettings(settingFileName).find((global: ISaveLocal) =>
+          global.settingName == jsonObject.get("settingName").getAsString)
+
+        if (save.isDefined)
+          save.get.settings = jsonObject.get("settings").getAsJsonArray
+
+      }
+
+    }
+  }
+
+  def saveSettings(): Unit = {
+
+    globalSettings.foreachEntry((_: String, value: List[ISave]) =>
+      for (save <- value)
+        save.saveSetting())
+
+    activeSettings.foreachEntry((_: String, value: List[ISave]) =>
+      for (save <- value)
+        save.saveSetting())
+
+    if (!settingsDirectory.exists())
+      settingsDirectory.mkdir()
+
+    if (!activeDirectory.exists())
+      activeDirectory.mkdir()
+
+    globalSettings.foreachEntry((fileName: String, saves: List[ISaveGlobal]) => {
+      val file = new File(settingsDirectory, fileName)
+      if (!file.exists())
+        file.createNewFile()
+
+      val jsonArray = new JsonArray
+      for (save <- saves) {
+        val jsonObject = new JsonObject
+
+        jsonObject.addProperty("settingName", save.settingName)
+        jsonObject.add("settings", save.settings)
+
+        jsonArray.add(jsonObject)
+      }
+
+      val writer = new FileWriter(file)
+      writer.write(serializer.toJson(jsonArray))
+      writer.close()
+    })
+
+
+    activeSettings.foreachEntry((fileName: String, saves: List[ISaveLocal]) => {
+      val file = new File(activeDirectory, fileName)
+      if (!file.exists())
+        file.createNewFile()
+
+      val jsonArray = new JsonArray
+      for (save <- saves) {
+        val jsonObject = new JsonObject
+        jsonObject.addProperty("settingName", save.settingName)
+        jsonObject.add("settings", save.settings)
+
+        jsonArray.add(jsonObject)
+      }
+
+
+      val writer = new FileWriter(file)
+      writer.write(serializer.toJson(jsonArray))
+      writer.close()
+    })
+
+  }
+
+}
diff --git a/src/minecraft/net/unnamed/settings/setting/SaveThisAlso.java b/src/minecraft/net/unnamed/settings/setting/SaveThisAlso.java
new file mode 100644
index 0000000..6126d40
--- /dev/null
+++ b/src/minecraft/net/unnamed/settings/setting/SaveThisAlso.java
@@ -0,0 +1,11 @@
+package net.unnamed.settings.setting;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target(ElementType.FIELD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface SaveThisAlso {
+}
diff --git a/src/minecraft/net/unnamed/settings/setting/Setting.scala b/src/minecraft/net/unnamed/settings/setting/Setting.scala
new file mode 100644
index 0000000..9d238c7
--- /dev/null
+++ b/src/minecraft/net/unnamed/settings/setting/Setting.scala
@@ -0,0 +1,103 @@
+package net.unnamed.settings.setting
+
+import com.google.gson.{Gson, GsonBuilder, JsonDeserializationContext, JsonDeserializer, JsonElement, JsonSerializationContext, JsonSerializer}
+import com.google.gson.annotations.Expose
+import net.unnamed.settings.Settings
+
+import java.lang.reflect.Type
+
+trait Setting[T] {
+  // TODO: integrate with internal REPL (that doesn't exist yet)
+
+  @(Expose @annotation.meta.field)
+  var expr: String = null
+
+  protected def getValue: T
+
+  def get: T = {
+    //    if (expr.isDefined)
+    //      eval(expr)
+    //    else
+    getValue
+  }
+
+  def set(value: T): Unit
+
+  val suggestedValue: String
+}
+
+object SettingSerializer extends JsonSerializer[Setting[_]] {
+
+  val serializer: Gson =  new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()
+
+  override def serialize(src: Setting[_], `type`: Type, jsonSerializationContext: JsonSerializationContext): JsonElement = {
+    val jsonObject = serializer.toJsonTree(src).getAsJsonObject
+    jsonObject.addProperty("expr", src.expr)
+    jsonObject
+  }
+}
+
+object SettingDeserializer extends JsonDeserializer[Setting[_]] {
+
+  val serializer: Gson =  new Gson()
+
+  override def deserialize(jsonElement: JsonElement, `type`: Type, jsonDeserializationContext: JsonDeserializationContext): Setting[_] = {
+    val setting = serializer.fromJson(jsonElement, `type`).asInstanceOf[Setting[_]]
+    val expr = jsonElement.getAsJsonObject.get("expr")
+    if (expr != null)
+      setting.expr = expr.getAsString
+    setting
+  }
+}
+
+
+class BoolSetting(
+                   @(Expose @annotation.meta.field)
+                   private var on: Boolean,
+                   private val default: Boolean = false) extends Setting[Boolean] {
+  override def set(value: Boolean): Unit =
+    on = value
+
+  override def getValue: Boolean = on
+
+  override val suggestedValue: String = default.toString
+}
+
+class IntegerSetting(
+                      @(Expose @annotation.meta.field)
+                      private var number: Int,
+                      private val suggestedLower: Int = 0,
+                      private val suggestedHigher: Int = 1) extends Setting[Int] {
+  override def getValue: Int = number
+
+  override def set(value: Int): Unit =
+    number = value
+
+  override val suggestedValue: String = s"[$suggestedLower, $suggestedHigher]"
+}
+
+
+class FloatSetting(
+                    @(Expose @annotation.meta.field)
+                    private var number: Float,
+                    private val suggestedLower: Float = 0,
+                    private val suggestedHigher: Float = 1) extends Setting[Float] {
+  override def getValue: Float = number
+
+  override def set(value: Float): Unit =
+    number = value
+
+  override val suggestedValue: String = s"[$suggestedLower, $suggestedHigher]"
+}
+
+class ListSetting(
+                   @(Expose @annotation.meta.field)
+                   private var choice: String,
+                   private val suggestedList: List[String] = Nil) extends Setting[String] {
+  override def getValue: String = choice
+
+  override def set(value: String): Unit =
+    choice = value
+
+  override val suggestedValue: String = suggestedList.toString()
+}
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/utils/REPLHelper.scala b/src/minecraft/net/unnamed/utils/REPLHelper.scala
new file mode 100644
index 0000000..82bb1a4
--- /dev/null
+++ b/src/minecraft/net/unnamed/utils/REPLHelper.scala
@@ -0,0 +1,20 @@
+package net.unnamed.utils
+
+import net.minecraft.client.main.Main
+
+object REPLHelper {
+  def startMinecraft(args: Array[String] = Array("--username", "Unnamed")): Unit = {
+
+    new Thread() {
+      override def run(): Unit = {
+        Main.main(Array(
+          "--version", "mcp",
+          "--accessToken", "0",
+          "--assetsDir", "assets",
+          "--assetIndex", "1.8",
+          "--userProperties", "{}",
+        ) ++ args)
+      }
+    }.start()
+  }
+}
diff --git a/src/minecraft/net/unnamed/utils/ReflectionUtils.scala b/src/minecraft/net/unnamed/utils/ReflectionUtils.scala
new file mode 100644
index 0000000..0ac3c67
--- /dev/null
+++ b/src/minecraft/net/unnamed/utils/ReflectionUtils.scala
@@ -0,0 +1,61 @@
+package net.unnamed.utils
+
+import java.io.File
+import java.lang.reflect.Field
+
+case object ReflectionUtils {
+  def getAllField(obj: Object): List[Field] = {
+    var fields: List[Field] = Nil
+
+    var clazz: Class[_] = obj.getClass
+
+    while (clazz != classOf[Object]) {
+      fields ++= clazz.getDeclaredFields
+      clazz = clazz.getSuperclass
+    }
+
+    fields
+  }
+
+  def getAllSubClassInPackage[T](pack: Package, clazz: Class[T]): List[Class[T]] = {
+    val clazzs = getClasses(pack.getName)
+    clazzs.filter((value: Class[_]) => clazz.isAssignableFrom(value) && clazz != value).asInstanceOf[List[Class[T]]]
+  }
+
+
+  private def getClasses(packageName: String) = {
+    val classLoader = Thread.currentThread.getContextClassLoader
+    assert(classLoader != null)
+    val path = packageName.replace('.', '/')
+    val resources = classLoader.getResources(path)
+    var dirs: List[File] = Nil
+    while ( {
+      resources.hasMoreElements
+    }) {
+      val resource = resources.nextElement
+      dirs ::= new File(resource.getFile)
+    }
+    var classes: List[Class[_]] = Nil
+    for (directory <- dirs) {
+      classes ++= findClasses(directory, packageName)
+    }
+    classes
+  }
+
+  private def findClasses(directory: File, packageName: String):List[Class[_]] = {
+    var classes: List[Class[_]] = Nil
+    if (directory.exists) {
+
+      val files = directory.listFiles
+      for (file <- files) {
+        if (file.isDirectory) {
+          assert(!file.getName.contains("."))
+          classes ++= findClasses(file, packageName + "." + file.getName)
+        }
+        else if (file.getName.endsWith(".class"))
+          classes ::= (Class.forName(packageName + '.' + file.getName.substring(0, file.getName.length - 6)))
+      }
+    }
+    classes
+  }
+}
diff --git a/src/minecraft/net/unnamed/utils/Rotation.scala b/src/minecraft/net/unnamed/utils/Rotation.scala
new file mode 100644
index 0000000..5dee056
--- /dev/null
+++ b/src/minecraft/net/unnamed/utils/Rotation.scala
@@ -0,0 +1,43 @@
+package net.unnamed.utils
+
+import net.minecraft.client.settings.GameSettings
+import net.minecraft.entity.Entity
+import net.unnamed.utils.Rotation.getGCD
+import net.unnamed.utils.common.ifce.MinecraftInstance
+
+case class Rotation(rotationYaw: Float, rotationPitch: Float) {
+
+  def correctByGCD(GCD: Float, input: Float): Float = {
+    val mod = input % GCD
+    input - (if (mod < GCD / 2) mod else mod - GCD)
+  }
+
+  def add(deltaYaw: Float, deltaPitch: Float): Rotation = {
+    val GCD = getGCD
+
+    val correctedDeltaYaw = correctByGCD(GCD, deltaYaw)
+    val correctedDeltaPitch = correctByGCD(GCD, deltaPitch)
+
+    Rotation.apply(rotationYaw + correctedDeltaYaw, rotationPitch + correctedDeltaPitch)
+  }
+
+  def +(deltaYaw: Float, deltaPitch: Float): Rotation = {
+    add(deltaYaw, deltaPitch)
+  }
+
+  def to(entity: Entity): Unit = {
+    entity.rotationYaw = rotationYaw
+    entity.rotationPitch = rotationPitch
+  }
+}
+
+object Rotation extends MinecraftInstance {
+  def getGCD: Float = {
+    val f = mc.gameSettings.mouseSensitivity * 0.6F + 0.2F
+    f * f * f * 8.0F
+  }
+
+  def fromEntity(entity: Entity): Rotation = {
+    Rotation.apply(entity.rotationYaw, entity.rotationPitch)
+  }
+}
\ No newline at end of file
diff --git a/src/minecraft/net/unnamed/utils/common/ifce/ClientInstance.scala b/src/minecraft/net/unnamed/utils/common/ifce/ClientInstance.scala
new file mode 100644
index 0000000..b71f279
--- /dev/null
+++ b/src/minecraft/net/unnamed/utils/common/ifce/ClientInstance.scala
@@ -0,0 +1,8 @@
+package net.unnamed.utils.common.ifce
+
+import net.unnamed.Unnamed
+import net.unnamed.world.ClientSideWorld
+
+trait ClientInstance {
+  def clientSideWorld: ClientSideWorld = Unnamed.clientSideWorld.get
+}
diff --git a/src/minecraft/net/unnamed/utils/common/interface/MinecraftInstance.scala b/src/minecraft/net/unnamed/utils/common/ifce/MinecraftInstance.scala
similarity index 72%
rename from src/minecraft/net/unnamed/utils/common/interface/MinecraftInstance.scala
rename to src/minecraft/net/unnamed/utils/common/ifce/MinecraftInstance.scala
index 3d009a3..0a8561f 100644
--- a/src/minecraft/net/unnamed/utils/common/interface/MinecraftInstance.scala
+++ b/src/minecraft/net/unnamed/utils/common/ifce/MinecraftInstance.scala
@@ -1,4 +1,4 @@
-package net.unnamed.utils.common.interface
+package net.unnamed.utils.common.ifce
 
 import net.minecraft.client.Minecraft
 
diff --git a/src/minecraft/net/unnamed/utils/common/interface/Toggleable.scala b/src/minecraft/net/unnamed/utils/common/ifce/Toggleable.scala
similarity index 87%
rename from src/minecraft/net/unnamed/utils/common/interface/Toggleable.scala
rename to src/minecraft/net/unnamed/utils/common/ifce/Toggleable.scala
index 1f53051..f169657 100644
--- a/src/minecraft/net/unnamed/utils/common/interface/Toggleable.scala
+++ b/src/minecraft/net/unnamed/utils/common/ifce/Toggleable.scala
@@ -1,4 +1,4 @@
-package net.unnamed.utils.common.interface
+package net.unnamed.utils.common.ifce
 
 trait Toggleable {
   private var isActive: Boolean = false
diff --git a/src/minecraft/net/unnamed/world/ClientSideWorld.scala b/src/minecraft/net/unnamed/world/ClientSideWorld.scala
new file mode 100644
index 0000000..eb36d69
--- /dev/null
+++ b/src/minecraft/net/unnamed/world/ClientSideWorld.scala
@@ -0,0 +1,18 @@
+package net.unnamed.world
+
+import net.minecraft.entity.Entity
+import net.minecraft.world.World
+import net.unnamed.utils.common.ifce.MinecraftInstance
+import net.unnamed.world.inputcontrol.Cameras
+
+class ClientSideWorld (val world: World) extends MinecraftInstance {
+
+  val cameras = new Cameras
+
+  var clientSideEntityId: Int = -1
+
+  def addClientEntity(entity: Entity): Unit = {
+    mc.theWorld.addEntityToWorld(clientSideEntityId, entity)
+    clientSideEntityId -= 1
+  }
+}
diff --git a/src/minecraft/net/unnamed/world/inputcontrol/Cameras.scala b/src/minecraft/net/unnamed/world/inputcontrol/Cameras.scala
new file mode 100644
index 0000000..89c737e
--- /dev/null
+++ b/src/minecraft/net/unnamed/world/inputcontrol/Cameras.scala
@@ -0,0 +1,23 @@
+package net.unnamed.world.inputcontrol
+
+import net.minecraft.entity.Entity
+import net.unnamed.utils.common.ifce.MinecraftInstance
+
+class Cameras extends MinecraftInstance {
+  var cameras: List[Entity] = Nil
+
+  var activeCamera: Option[Entity] = None
+
+  def setActiveCamera(entity: Option[Entity]): Unit = {
+    if (entity.isDefined)
+      cameras ::= entity.get
+    activeCamera = entity
+  }
+
+  def getPlayerOrSupposedToBeViewEntity: Entity = {
+    if (activeCamera.isDefined)
+      mc.thePlayer
+    else
+      this.mc.getRenderViewEntity
+  }
+}
diff --git a/src/minecraft/net/unnamed/world/inputcontrol/FreeCamera.scala b/src/minecraft/net/unnamed/world/inputcontrol/FreeCamera.scala
new file mode 100644
index 0000000..5daf135
--- /dev/null
+++ b/src/minecraft/net/unnamed/world/inputcontrol/FreeCamera.scala
@@ -0,0 +1,58 @@
+package net.unnamed.world.inputcontrol
+
+import net.minecraft.client.Minecraft
+import net.minecraft.entity.player.EntityPlayer
+import net.minecraft.util.MovementInputFromOptions
+import net.unnamed.Unnamed
+import net.unnamed.utils.common.ifce.{ClientInstance, MinecraftInstance}
+
+class FreeCamera
+  extends EntityPlayer(Minecraft.getMinecraft.theWorld,
+    Minecraft.getMinecraft.thePlayer.getGameProfile) with MinecraftInstance with ClientInstance{
+
+  {
+    clonePlayer(mc.thePlayer, true)
+    copyLocationAndAnglesFrom(mc.thePlayer)
+
+    Unnamed.clientSideWorld.get.addClientEntity(this)
+
+    noClip = true
+    capabilities.isFlying = true
+
+
+    setInvisible(true)
+  }
+
+  /**
+   * Returns whether the entity is in a server world
+   */
+  override def isServerWorld: Boolean = true
+
+  override def moveFlying(strafe: Float, forward: Float, friction: Float): Unit = {
+
+    var inputStrafe = strafe
+    var inputForward = forward
+
+    if (clientSideWorld.cameras.activeCamera.isDefined && clientSideWorld.cameras.activeCamera.get == this) {
+      val inputControl = new MovementInputFromOptions(mc.gameSettings)
+      inputControl.updatePlayerMoveState()
+
+      inputStrafe = inputControl.moveStrafe
+      inputForward = inputControl.moveForward
+
+
+      if (inputControl.sneak)
+        motionY -= capabilities.getFlySpeed * 3
+
+      if (inputControl.jump)
+        motionY += capabilities.getFlySpeed * 3
+    }
+
+    super.moveFlying(inputStrafe, inputForward, friction)
+  }
+
+  /**
+   * Returns true if the player is in spectator mode.
+   */
+  override def isSpectator: Boolean = false
+}
diff --git a/src/minecraft/net/unnamed/world/inputcontrol/PlayerMovementControl.scala b/src/minecraft/net/unnamed/world/inputcontrol/PlayerMovementControl.scala
new file mode 100644
index 0000000..23661d4
--- /dev/null
+++ b/src/minecraft/net/unnamed/world/inputcontrol/PlayerMovementControl.scala
@@ -0,0 +1,21 @@
+package net.unnamed.world.inputcontrol
+
+import net.minecraft.client.settings.GameSettings
+import net.minecraft.util.MovementInputFromOptions
+import net.unnamed.world.schedule.Scheduler
+
+class PlayerMovementControl(val gameSettings: GameSettings) extends MovementInputFromOptions(gameSettings) {
+
+  override def updatePlayerMoveState(): Unit = {
+    if (Scheduler.isPlayerControlledByScheduler) {
+      val movementInput = Scheduler.getPlayerMovementInput
+      moveForward = movementInput.moveForward
+      moveStrafe = movementInput.moveStrafe
+      jump = movementInput.jump
+      sneak = movementInput.sneak
+      return
+    }
+
+    super.updatePlayerMoveState()
+  }
+}
diff --git a/src/minecraft/net/unnamed/world/schedule/Scheduler.scala b/src/minecraft/net/unnamed/world/schedule/Scheduler.scala
new file mode 100644
index 0000000..10ae628
--- /dev/null
+++ b/src/minecraft/net/unnamed/world/schedule/Scheduler.scala
@@ -0,0 +1,21 @@
+package net.unnamed.world.schedule
+
+import net.minecraft.util.MovementInput
+import net.unnamed.utils.Rotation
+
+
+object Scheduler {
+
+
+  def isPlayerControlledByScheduler: Boolean = {
+    false
+  }
+
+  def getPlayerMovementInput: MovementInput = {
+    new MovementInput()
+  }
+
+  def getPlayerRotation: Rotation = {
+    Rotation.apply(0, 0)
+  }
+}
