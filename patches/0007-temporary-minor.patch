diff --git a/mcp918.iml b/mcp918.iml
index 1718dab..754ca20 100644
--- a/mcp918.iml
+++ b/mcp918.iml
@@ -21,6 +21,7 @@
     <content url="file://$MODULE_DIR$/../src">
       <sourceFolder url="file://$MODULE_DIR$/../src/embeddedlibs" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/../src/unnamed-client" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/../src/embeddedresource" type="java-resource" />
     </content>
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" name="libraryjavasound-20101123" level="project" />
@@ -65,5 +66,6 @@
     <orderEntry type="library" name="lwjgl.openal" level="project" />
     <orderEntry type="library" name="lwjgl-natives" level="project" />
     <orderEntry type="library" name="io.netty.all" level="project" />
+    <orderEntry type="library" name="lwjgl.nanovg" level="project" />
   </component>
 </module>
\ No newline at end of file
diff --git a/src/minecraft/net/minecraft/client/Minecraft.java b/src/minecraft/net/minecraft/client/Minecraft.java
index 06aa958..84b7186 100644
--- a/src/minecraft/net/minecraft/client/Minecraft.java
+++ b/src/minecraft/net/minecraft/client/Minecraft.java
@@ -89,16 +89,16 @@ import net.unnamed.Unnamed;
 import net.unnamed.event.EventBus;
 import net.unnamed.event.vanilla.ClientShutDownEvent;
 import net.unnamed.event.vanilla.CurrentGUIScreenUpdateEvent;
+import net.unnamed.event.vanilla.WindowResizeEvent;
 import net.unnamed.event.vanilla.WorldEvent;
-import net.unnamed.world.inputcontrol.PlayerMovementControl;
+import net.unnamed.camera.Cameras;
+import net.unnamed.camera.PlayerMovementControl;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import org.lwjgl.opengl.GL11C;
-import org.lwjgl.opengl.GL46;
-import org.lwjgl.system.SharedLibraryUtil;
 import org.lwjglx.LWJGLException;
 import org.lwjglx.Sys;
 import org.lwjglx.input.Keyboard;
@@ -1633,6 +1633,8 @@ public class Minecraft implements IThreadListener, IPlayerUsage
      */
     private void resize(int width, int height)
     {
+        EventBus.fireEventJ(new WindowResizeEvent(width, height));
+
         this.displayWidth = Math.max(1, width);
         this.displayHeight = Math.max(1, height);
 
@@ -2126,6 +2128,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage
                     this.theWorld.setLastLightningBolt(this.theWorld.getLastLightningBolt() - 1);
                 }
 
+                // TODO: onLivingUpdate
                 this.theWorld.updateEntities();
             }
         }
@@ -3127,8 +3130,8 @@ public class Minecraft implements IThreadListener, IPlayerUsage
     public Entity getRenderViewEntity()
     {
         if (Unnamed.clientSideWorld().isDefined()
-                && Unnamed.clientSideWorld().get().cameras().activeCamera().isDefined())
-            return Unnamed.clientSideWorld().get().cameras().activeCamera().get();
+                && Cameras.activeCamera().isDefined())
+            return Cameras.activeCamera().get();
 
         return this.renderViewEntity;
     }
diff --git a/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java b/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java
index ca18441..1cce6c4 100644
--- a/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java
+++ b/src/minecraft/net/minecraft/client/entity/EntityPlayerSP.java
@@ -52,11 +52,12 @@ import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.IInteractionObject;
 import net.minecraft.world.World;
 import net.unnamed.event.EventBus;
-import net.unnamed.event.vanilla.PlayerLivingUpdateBeginEvent;
-import net.unnamed.world.schedule.Scheduler;
+import net.unnamed.event.vanilla.tick.PlayerLivingUpdateBeginEvent;
+import net.unnamed.modules.movement.Sprint;
+import net.unnamed.schedule.Scheduler;
+import net.unnamed.schedule.resource.PlayerControllableAction;
 
-public class EntityPlayerSP extends AbstractClientPlayer
-{
+public class EntityPlayerSP extends AbstractClientPlayer {
     public final NetHandlerPlayClient sendQueue;
     private final StatFileWriter statWriter;
 
@@ -90,10 +91,14 @@ public class EntityPlayerSP extends AbstractClientPlayer
      */
     private float lastReportedPitch;
 
-    /** the last sneaking state sent to the server */
+    /**
+     * the last sneaking state sent to the server
+     */
     private boolean serverSneakState;
 
-    /** the last sprinting state sent to the server */
+    /**
+     * the last sprinting state sent to the server
+     */
     private boolean serverSprintState;
 
     /**
@@ -113,7 +118,9 @@ public class EntityPlayerSP extends AbstractClientPlayer
      */
     protected int sprintToggleTimer;
 
-    /** Ticks left before sprinting is disabled. */
+    /**
+     * Ticks left before sprinting is disabled.
+     */
     public int sprintingTicksLeft;
     public float renderArmYaw;
     public float renderArmPitch;
@@ -122,14 +129,17 @@ public class EntityPlayerSP extends AbstractClientPlayer
     private int horseJumpPowerCounter;
     private float horseJumpPower;
 
-    /** The amount of time an entity has been in a Portal */
+    /**
+     * The amount of time an entity has been in a Portal
+     */
     public float timeInPortal;
 
-    /** The amount of time an entity has been in a Portal the previous tick */
+    /**
+     * The amount of time an entity has been in a Portal the previous tick
+     */
     public float prevTimeInPortal;
 
-    public EntityPlayerSP(Minecraft mcIn, World worldIn, NetHandlerPlayClient netHandler, StatFileWriter statFile)
-    {
+    public EntityPlayerSP(Minecraft mcIn, World worldIn, NetHandlerPlayClient netHandler, StatFileWriter statFile) {
         super(worldIn, netHandler.getGameProfile());
         this.sendQueue = netHandler;
         this.statWriter = statFile;
@@ -140,47 +150,38 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Called when the entity is attacked.
      */
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
         return false;
     }
 
     /**
      * Heal living entity (param: amount of half-hearts)
      */
-    public void heal(float healAmount)
-    {
+    public void heal(float healAmount) {
     }
 
     /**
      * Called when a player mounts an entity. e.g. mounts a pig, mounts a boat.
      */
-    public void mountEntity(Entity entityIn)
-    {
+    public void mountEntity(Entity entityIn) {
         super.mountEntity(entityIn);
 
-        if (entityIn instanceof EntityMinecart)
-        {
-            this.mc.getSoundHandler().playSound(new MovingSoundMinecartRiding(this, (EntityMinecart)entityIn));
+        if (entityIn instanceof EntityMinecart) {
+            this.mc.getSoundHandler().playSound(new MovingSoundMinecartRiding(this, (EntityMinecart) entityIn));
         }
     }
 
     /**
      * Called to update the entity's position/logic.
      */
-    public void onUpdate()
-    {
-        if (this.worldObj.isBlockLoaded(new BlockPos(this.posX, 0.0D, this.posZ)))
-        {
+    public void onUpdate() {
+        if (this.worldObj.isBlockLoaded(new BlockPos(this.posX, 0.0D, this.posZ))) {
             super.onUpdate();
 
-            if (this.isRiding())
-            {
+            if (this.isRiding()) {
                 this.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(this.rotationYaw, this.rotationPitch, this.onGround));
                 this.sendQueue.addToSendQueue(new C0CPacketInput(this.moveStrafing, this.moveForward, this.movementInput.jump, this.movementInput.sneak));
-            }
-            else
-            {
+            } else {
                 this.onUpdateWalkingPlayer();
             }
         }
@@ -189,18 +190,13 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * called every tick when the player is on foot. Performs all the things that normally happen during movement.
      */
-    public void onUpdateWalkingPlayer()
-    {
+    public void onUpdateWalkingPlayer() {
         boolean flag = this.isSprinting();
 
-        if (flag != this.serverSprintState)
-        {
-            if (flag)
-            {
+        if (flag != this.serverSprintState) {
+            if (flag) {
                 this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.START_SPRINTING));
-            }
-            else
-            {
+            } else {
                 this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.STOP_SPRINTING));
             }
 
@@ -209,67 +205,50 @@ public class EntityPlayerSP extends AbstractClientPlayer
 
         boolean flag1 = this.isSneaking();
 
-        if (flag1 != this.serverSneakState)
-        {
-            if (flag1)
-            {
+        if (flag1 != this.serverSneakState) {
+            if (flag1) {
                 this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.START_SNEAKING));
-            }
-            else
-            {
+            } else {
                 this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.STOP_SNEAKING));
             }
 
             this.serverSneakState = flag1;
         }
 
-        if (this.isCurrentViewEntity())
-        {
+        if (this.isCurrentViewEntity()) {
             double d0 = this.posX - this.lastReportedPosX;
             double d1 = this.getEntityBoundingBox().minY - this.lastReportedPosY;
             double d2 = this.posZ - this.lastReportedPosZ;
-            double d3 = (double)(this.rotationYaw - this.lastReportedYaw);
-            double d4 = (double)(this.rotationPitch - this.lastReportedPitch);
+            double d3 = (double) (this.rotationYaw - this.lastReportedYaw);
+            double d4 = (double) (this.rotationPitch - this.lastReportedPitch);
             boolean flag2 = d0 * d0 + d1 * d1 + d2 * d2 > 9.0E-4D || this.positionUpdateTicks >= 20;
             boolean flag3 = d3 != 0.0D || d4 != 0.0D;
 
-            if (this.ridingEntity == null)
-            {
-                if (flag2 && flag3)
-                {
+            if (this.ridingEntity == null) {
+                if (flag2 && flag3) {
                     this.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(this.posX, this.getEntityBoundingBox().minY, this.posZ, this.rotationYaw, this.rotationPitch, this.onGround));
-                }
-                else if (flag2)
-                {
+                } else if (flag2) {
                     this.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.posX, this.getEntityBoundingBox().minY, this.posZ, this.onGround));
-                }
-                else if (flag3)
-                {
+                } else if (flag3) {
                     this.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(this.rotationYaw, this.rotationPitch, this.onGround));
-                }
-                else
-                {
+                } else {
                     this.sendQueue.addToSendQueue(new C03PacketPlayer(this.onGround));
                 }
-            }
-            else
-            {
+            } else {
                 this.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(this.motionX, -999.0D, this.motionZ, this.rotationYaw, this.rotationPitch, this.onGround));
                 flag2 = false;
             }
 
             ++this.positionUpdateTicks;
 
-            if (flag2)
-            {
+            if (flag2) {
                 this.lastReportedPosX = this.posX;
                 this.lastReportedPosY = this.getEntityBoundingBox().minY;
                 this.lastReportedPosZ = this.posZ;
                 this.positionUpdateTicks = 0;
             }
 
-            if (flag3)
-            {
+            if (flag3) {
                 this.lastReportedYaw = this.rotationYaw;
                 this.lastReportedPitch = this.rotationPitch;
             }
@@ -279,8 +258,7 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Called when player presses the drop item key
      */
-    public EntityItem dropOneItem(boolean dropAll)
-    {
+    public EntityItem dropOneItem(boolean dropAll) {
         C07PacketPlayerDigging.Action c07packetplayerdigging$action = dropAll ? C07PacketPlayerDigging.Action.DROP_ALL_ITEMS : C07PacketPlayerDigging.Action.DROP_ITEM;
         this.sendQueue.addToSendQueue(new C07PacketPlayerDigging(c07packetplayerdigging$action, BlockPos.ORIGIN, EnumFacing.DOWN));
         return null;
@@ -289,29 +267,25 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Joins the passed in entity item with the world. Args: entityItem
      */
-    protected void joinEntityItemWithWorld(EntityItem itemIn)
-    {
+    protected void joinEntityItemWithWorld(EntityItem itemIn) {
     }
 
     /**
      * Sends a chat message from the player. Args: chatMessage
      */
-    public void sendChatMessage(String message)
-    {
+    public void sendChatMessage(String message) {
         this.sendQueue.addToSendQueue(new C01PacketChatMessage(message));
     }
 
     /**
      * Swings the item the player is holding.
      */
-    public void swingItem()
-    {
+    public void swingItem() {
         super.swingItem();
         this.sendQueue.addToSendQueue(new C0APacketAnimation());
     }
 
-    public void respawnPlayer()
-    {
+    public void respawnPlayer() {
         this.sendQueue.addToSendQueue(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
     }
 
@@ -319,10 +293,8 @@ public class EntityPlayerSP extends AbstractClientPlayer
      * Deals damage to the entity. If its a EntityPlayer then will take damage from the armor first and then health
      * second with the reduced value. Args: damageAmount
      */
-    protected void damageEntity(DamageSource damageSrc, float damageAmount)
-    {
-        if (!this.isEntityInvulnerable(damageSrc))
-        {
+    protected void damageEntity(DamageSource damageSrc, float damageAmount) {
+        if (!this.isEntityInvulnerable(damageSrc)) {
             this.setHealth(this.getHealth() - damageAmount);
         }
     }
@@ -330,48 +302,38 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * set current crafting inventory back to the 2x2 square
      */
-    public void closeScreen()
-    {
+    public void closeScreen() {
         this.sendQueue.addToSendQueue(new C0DPacketCloseWindow(this.openContainer.windowId));
         this.closeScreenAndDropStack();
     }
 
-    public void closeScreenAndDropStack()
-    {
-        this.inventory.setItemStack((ItemStack)null);
+    public void closeScreenAndDropStack() {
+        this.inventory.setItemStack((ItemStack) null);
         super.closeScreen();
-        this.mc.displayGuiScreen((GuiScreen)null);
+        this.mc.displayGuiScreen((GuiScreen) null);
     }
 
     /**
      * Updates health locally.
      */
-    public void setPlayerSPHealth(float health)
-    {
-        if (this.hasValidHealth)
-        {
+    public void setPlayerSPHealth(float health) {
+        if (this.hasValidHealth) {
             float f = this.getHealth() - health;
 
-            if (f <= 0.0F)
-            {
+            if (f <= 0.0F) {
                 this.setHealth(health);
 
-                if (f < 0.0F)
-                {
+                if (f < 0.0F) {
                     this.hurtResistantTime = this.maxHurtResistantTime / 2;
                 }
-            }
-            else
-            {
+            } else {
                 this.lastDamage = f;
                 this.setHealth(this.getHealth());
                 this.hurtResistantTime = this.maxHurtResistantTime;
                 this.damageEntity(DamageSource.generic, f);
                 this.hurtTime = this.maxHurtTime = 10;
             }
-        }
-        else
-        {
+        } else {
             this.setHealth(health);
             this.hasValidHealth = true;
         }
@@ -380,12 +342,9 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Adds a value to a statistic field.
      */
-    public void addStat(StatBase stat, int amount)
-    {
-        if (stat != null)
-        {
-            if (stat.isIndependent)
-            {
+    public void addStat(StatBase stat, int amount) {
+        if (stat != null) {
+            if (stat.isIndependent) {
                 super.addStat(stat, amount);
             }
         }
@@ -394,110 +353,89 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Sends the player's abilities to the server (if there is one).
      */
-    public void sendPlayerAbilities()
-    {
+    public void sendPlayerAbilities() {
         this.sendQueue.addToSendQueue(new C13PacketPlayerAbilities(this.capabilities));
     }
 
     /**
      * returns true if this is an EntityPlayerSP, or the logged in player.
      */
-    public boolean isUser()
-    {
+    public boolean isUser() {
         return true;
     }
 
-    protected void sendHorseJump()
-    {
-        this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.RIDING_JUMP, (int)(this.getHorseJumpPower() * 100.0F)));
+    protected void sendHorseJump() {
+        this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.RIDING_JUMP, (int) (this.getHorseJumpPower() * 100.0F)));
     }
 
-    public void sendHorseInventory()
-    {
+    public void sendHorseInventory() {
         this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.OPEN_INVENTORY));
     }
 
-    public void setClientBrand(String brand)
-    {
+    public void setClientBrand(String brand) {
         this.clientBrand = brand;
     }
 
-    public String getClientBrand()
-    {
+    public String getClientBrand() {
         return this.clientBrand;
     }
 
-    public StatFileWriter getStatFileWriter()
-    {
+    public StatFileWriter getStatFileWriter() {
         return this.statWriter;
     }
 
-    public void addChatComponentMessage(IChatComponent chatComponent)
-    {
+    public void addChatComponentMessage(IChatComponent chatComponent) {
         this.mc.ingameGUI.getChatGUI().printChatMessage(chatComponent);
     }
 
-    protected boolean pushOutOfBlocks(double x, double y, double z)
-    {
-        if (this.noClip)
-        {
+    protected boolean pushOutOfBlocks(double x, double y, double z) {
+        if (this.noClip) {
             return false;
-        }
-        else
-        {
+        } else {
             BlockPos blockpos = new BlockPos(x, y, z);
-            double d0 = x - (double)blockpos.getX();
-            double d1 = z - (double)blockpos.getZ();
+            double d0 = x - (double) blockpos.getX();
+            double d1 = z - (double) blockpos.getZ();
 
-            if (!this.isOpenBlockSpace(blockpos))
-            {
+            if (!this.isOpenBlockSpace(blockpos)) {
                 int i = -1;
                 double d2 = 9999.0D;
 
-                if (this.isOpenBlockSpace(blockpos.west()) && d0 < d2)
-                {
+                if (this.isOpenBlockSpace(blockpos.west()) && d0 < d2) {
                     d2 = d0;
                     i = 0;
                 }
 
-                if (this.isOpenBlockSpace(blockpos.east()) && 1.0D - d0 < d2)
-                {
+                if (this.isOpenBlockSpace(blockpos.east()) && 1.0D - d0 < d2) {
                     d2 = 1.0D - d0;
                     i = 1;
                 }
 
-                if (this.isOpenBlockSpace(blockpos.north()) && d1 < d2)
-                {
+                if (this.isOpenBlockSpace(blockpos.north()) && d1 < d2) {
                     d2 = d1;
                     i = 4;
                 }
 
-                if (this.isOpenBlockSpace(blockpos.south()) && 1.0D - d1 < d2)
-                {
+                if (this.isOpenBlockSpace(blockpos.south()) && 1.0D - d1 < d2) {
                     d2 = 1.0D - d1;
                     i = 5;
                 }
 
                 float f = 0.1F;
 
-                if (i == 0)
-                {
-                    this.motionX = (double)(-f);
+                if (i == 0) {
+                    this.motionX = (double) (-f);
                 }
 
-                if (i == 1)
-                {
-                    this.motionX = (double)f;
+                if (i == 1) {
+                    this.motionX = (double) f;
                 }
 
-                if (i == 4)
-                {
-                    this.motionZ = (double)(-f);
+                if (i == 4) {
+                    this.motionZ = (double) (-f);
                 }
 
-                if (i == 5)
-                {
-                    this.motionZ = (double)f;
+                if (i == 5) {
+                    this.motionZ = (double) f;
                 }
             }
 
@@ -508,16 +446,14 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Returns true if the block at the given BlockPos and the block above it are NOT full cubes.
      */
-    private boolean isOpenBlockSpace(BlockPos pos)
-    {
+    private boolean isOpenBlockSpace(BlockPos pos) {
         return !this.worldObj.getBlockState(pos).getBlock().isNormalCube() && !this.worldObj.getBlockState(pos.up()).getBlock().isNormalCube();
     }
 
     /**
      * Set sprinting switch for Entity.
      */
-    public void setSprinting(boolean sprinting)
-    {
+    public void setSprinting(boolean sprinting) {
         super.setSprinting(sprinting);
         this.sprintingTicksLeft = sprinting ? 600 : 0;
     }
@@ -525,8 +461,7 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Sets the current XP, total XP, and level number.
      */
-    public void setXPStats(float currentXP, int maxXP, int level)
-    {
+    public void setXPStats(float currentXP, int maxXP, int level) {
         this.experience = currentXP;
         this.experienceTotal = maxXP;
         this.experienceLevel = level;
@@ -535,16 +470,14 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Send a chat message to the CommandSender
      */
-    public void addChatMessage(IChatComponent component)
-    {
+    public void addChatMessage(IChatComponent component) {
         this.mc.ingameGUI.getChatGUI().printChatMessage(component);
     }
 
     /**
      * Returns {@code true} if the CommandSender is allowed to execute the command, {@code false} if not
      */
-    public boolean canCommandSenderUseCommand(int permLevel, String commandName)
-    {
+    public boolean canCommandSenderUseCommand(int permLevel, String commandName) {
         return permLevel <= 0;
     }
 
@@ -552,53 +485,44 @@ public class EntityPlayerSP extends AbstractClientPlayer
      * Get the position in the world. <b>{@code null} is not allowed!</b> If you are not an entity in the world, return
      * the coordinates 0, 0, 0
      */
-    public BlockPos getPosition()
-    {
+    public BlockPos getPosition() {
         return new BlockPos(this.posX + 0.5D, this.posY + 0.5D, this.posZ + 0.5D);
     }
 
-    public void playSound(String name, float volume, float pitch)
-    {
+    public void playSound(String name, float volume, float pitch) {
         this.worldObj.playSound(this.posX, this.posY, this.posZ, name, volume, pitch, false);
     }
 
     /**
      * Returns whether the entity is in a server world
      */
-    public boolean isServerWorld()
-    {
+    public boolean isServerWorld() {
         return true;
     }
 
-    public boolean isRidingHorse()
-    {
-        return this.ridingEntity != null && this.ridingEntity instanceof EntityHorse && ((EntityHorse)this.ridingEntity).isHorseSaddled();
+    public boolean isRidingHorse() {
+        return this.ridingEntity != null && this.ridingEntity instanceof EntityHorse && ((EntityHorse) this.ridingEntity).isHorseSaddled();
     }
 
-    public float getHorseJumpPower()
-    {
+    public float getHorseJumpPower() {
         return this.horseJumpPower;
     }
 
-    public void openEditSign(TileEntitySign signTile)
-    {
+    public void openEditSign(TileEntitySign signTile) {
         this.mc.displayGuiScreen(new GuiEditSign(signTile));
     }
 
-    public void openEditCommandBlock(CommandBlockLogic cmdBlockLogic)
-    {
+    public void openEditCommandBlock(CommandBlockLogic cmdBlockLogic) {
         this.mc.displayGuiScreen(new GuiCommandBlock(cmdBlockLogic));
     }
 
     /**
      * Displays the GUI for interacting with a book.
      */
-    public void displayGUIBook(ItemStack bookStack)
-    {
+    public void displayGUIBook(ItemStack bookStack) {
         Item item = bookStack.getItem();
 
-        if (item == Items.writable_book)
-        {
+        if (item == Items.writable_book) {
             this.mc.displayGuiScreen(new GuiScreenBook(this, bookStack, true));
         }
     }
@@ -606,181 +530,139 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Displays the GUI for interacting with a chest inventory. Args: chestInventory
      */
-    public void displayGUIChest(IInventory chestInventory)
-    {
-        String s = chestInventory instanceof IInteractionObject ? ((IInteractionObject)chestInventory).getGuiID() : "minecraft:container";
+    public void displayGUIChest(IInventory chestInventory) {
+        String s = chestInventory instanceof IInteractionObject ? ((IInteractionObject) chestInventory).getGuiID() : "minecraft:container";
 
-        if ("minecraft:chest".equals(s))
-        {
+        if ("minecraft:chest".equals(s)) {
             this.mc.displayGuiScreen(new GuiChest(this.inventory, chestInventory));
-        }
-        else if ("minecraft:hopper".equals(s))
-        {
+        } else if ("minecraft:hopper".equals(s)) {
             this.mc.displayGuiScreen(new GuiHopper(this.inventory, chestInventory));
-        }
-        else if ("minecraft:furnace".equals(s))
-        {
+        } else if ("minecraft:furnace".equals(s)) {
             this.mc.displayGuiScreen(new GuiFurnace(this.inventory, chestInventory));
-        }
-        else if ("minecraft:brewing_stand".equals(s))
-        {
+        } else if ("minecraft:brewing_stand".equals(s)) {
             this.mc.displayGuiScreen(new GuiBrewingStand(this.inventory, chestInventory));
-        }
-        else if ("minecraft:beacon".equals(s))
-        {
+        } else if ("minecraft:beacon".equals(s)) {
             this.mc.displayGuiScreen(new GuiBeacon(this.inventory, chestInventory));
-        }
-        else if (!"minecraft:dispenser".equals(s) && !"minecraft:dropper".equals(s))
-        {
+        } else if (!"minecraft:dispenser".equals(s) && !"minecraft:dropper".equals(s)) {
             this.mc.displayGuiScreen(new GuiChest(this.inventory, chestInventory));
-        }
-        else
-        {
+        } else {
             this.mc.displayGuiScreen(new GuiDispenser(this.inventory, chestInventory));
         }
     }
 
-    public void displayGUIHorse(EntityHorse horse, IInventory horseInventory)
-    {
+    public void displayGUIHorse(EntityHorse horse, IInventory horseInventory) {
         this.mc.displayGuiScreen(new GuiScreenHorseInventory(this.inventory, horseInventory, horse));
     }
 
-    public void displayGui(IInteractionObject guiOwner)
-    {
+    public void displayGui(IInteractionObject guiOwner) {
         String s = guiOwner.getGuiID();
 
-        if ("minecraft:crafting_table".equals(s))
-        {
+        if ("minecraft:crafting_table".equals(s)) {
             this.mc.displayGuiScreen(new GuiCrafting(this.inventory, this.worldObj));
-        }
-        else if ("minecraft:enchanting_table".equals(s))
-        {
+        } else if ("minecraft:enchanting_table".equals(s)) {
             this.mc.displayGuiScreen(new GuiEnchantment(this.inventory, this.worldObj, guiOwner));
-        }
-        else if ("minecraft:anvil".equals(s))
-        {
+        } else if ("minecraft:anvil".equals(s)) {
             this.mc.displayGuiScreen(new GuiRepair(this.inventory, this.worldObj));
         }
     }
 
-    public void displayVillagerTradeGui(IMerchant villager)
-    {
+    public void displayVillagerTradeGui(IMerchant villager) {
         this.mc.displayGuiScreen(new GuiMerchant(this.inventory, villager, this.worldObj));
     }
 
     /**
      * Called when the player performs a critical hit on the Entity. Args: entity that was hit critically
      */
-    public void onCriticalHit(Entity entityHit)
-    {
+    public void onCriticalHit(Entity entityHit) {
         this.mc.effectRenderer.emitParticleAtEntity(entityHit, EnumParticleTypes.CRIT);
     }
 
-    public void onEnchantmentCritical(Entity entityHit)
-    {
+    public void onEnchantmentCritical(Entity entityHit) {
         this.mc.effectRenderer.emitParticleAtEntity(entityHit, EnumParticleTypes.CRIT_MAGIC);
     }
 
     /**
      * Returns if this entity is sneaking.
      */
-    public boolean isSneaking()
-    {
+    public boolean isSneaking() {
         boolean flag = this.movementInput != null ? this.movementInput.sneak : false;
         return flag && !this.sleeping;
     }
 
-    public void updateEntityActionState()
-    {
+    public void updateEntityActionState() {
         super.updateEntityActionState();
 
-        if (this.isCurrentViewEntity())
-        {
+        if (this.isCurrentViewEntity()) {
             this.moveStrafing = this.movementInput.moveStrafe;
             this.moveForward = this.movementInput.moveForward;
             this.isJumping = this.movementInput.jump;
             this.prevRenderArmYaw = this.renderArmYaw;
             this.prevRenderArmPitch = this.renderArmPitch;
-            this.renderArmPitch = (float)((double)this.renderArmPitch + (double)(this.rotationPitch - this.renderArmPitch) * 0.5D);
-            this.renderArmYaw = (float)((double)this.renderArmYaw + (double)(this.rotationYaw - this.renderArmYaw) * 0.5D);
+            this.renderArmPitch = (float) ((double) this.renderArmPitch + (double) (this.rotationPitch - this.renderArmPitch) * 0.5D);
+            this.renderArmYaw = (float) ((double) this.renderArmYaw + (double) (this.rotationYaw - this.renderArmYaw) * 0.5D);
         }
     }
 
-    protected boolean isCurrentViewEntity()
-    {
-        return this.mc.getRenderViewEntity() == this || Scheduler.isPlayerControlledByScheduler();
+    protected boolean isCurrentViewEntity() {
+        return this.mc.getRenderViewEntity() == this
+                || Scheduler.isManagedByScheduler(PlayerControllableAction.AIM())
+                || Scheduler.isManagedByScheduler(PlayerControllableAction.MOVEMENT_INPUT());
     }
 
     /**
      * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons
      * use this to react to sunlight and start to burn.
      */
-    public void onLivingUpdate()
-    {
+    public void onLivingUpdate() {
         EventBus.fireEventJ(new PlayerLivingUpdateBeginEvent());
 
-        if (this.sprintingTicksLeft > 0)
-        {
+        if (this.sprintingTicksLeft > 0) {
             --this.sprintingTicksLeft;
 
-            if (this.sprintingTicksLeft == 0)
-            {
+            if (this.sprintingTicksLeft == 0) {
                 this.setSprinting(false);
             }
         }
 
-        if (this.sprintToggleTimer > 0)
-        {
+        if (this.sprintToggleTimer > 0) {
             --this.sprintToggleTimer;
         }
 
         this.prevTimeInPortal = this.timeInPortal;
 
-        if (this.inPortal)
-        {
-            if (this.mc.currentScreen != null && !this.mc.currentScreen.doesGuiPauseGame())
-            {
-                this.mc.displayGuiScreen((GuiScreen)null);
+        if (this.inPortal) {
+            if (this.mc.currentScreen != null && !this.mc.currentScreen.doesGuiPauseGame()) {
+                this.mc.displayGuiScreen((GuiScreen) null);
             }
 
-            if (this.timeInPortal == 0.0F)
-            {
+            if (this.timeInPortal == 0.0F) {
                 this.mc.getSoundHandler().playSound(PositionedSoundRecord.create(new ResourceLocation("portal.trigger"), this.rand.nextFloat() * 0.4F + 0.8F));
             }
 
             this.timeInPortal += 0.0125F;
 
-            if (this.timeInPortal >= 1.0F)
-            {
+            if (this.timeInPortal >= 1.0F) {
                 this.timeInPortal = 1.0F;
             }
 
             this.inPortal = false;
-        }
-        else if (this.isPotionActive(Potion.confusion) && this.getActivePotionEffect(Potion.confusion).getDuration() > 60)
-        {
+        } else if (this.isPotionActive(Potion.confusion) && this.getActivePotionEffect(Potion.confusion).getDuration() > 60) {
             this.timeInPortal += 0.006666667F;
 
-            if (this.timeInPortal > 1.0F)
-            {
+            if (this.timeInPortal > 1.0F) {
                 this.timeInPortal = 1.0F;
             }
-        }
-        else
-        {
-            if (this.timeInPortal > 0.0F)
-            {
+        } else {
+            if (this.timeInPortal > 0.0F) {
                 this.timeInPortal -= 0.05F;
             }
 
-            if (this.timeInPortal < 0.0F)
-            {
+            if (this.timeInPortal < 0.0F) {
                 this.timeInPortal = 0.0F;
             }
         }
 
-        if (this.timeUntilPortal > 0)
-        {
+        if (this.timeUntilPortal > 0) {
             --this.timeUntilPortal;
         }
 
@@ -790,59 +672,46 @@ public class EntityPlayerSP extends AbstractClientPlayer
         boolean flag2 = this.movementInput.moveForward >= f;
         this.movementInput.updatePlayerMoveState();
 
-        if (this.isUsingItem() && !this.isRiding())
-        {
+        if (this.isUsingItem() && !this.isRiding()) {
             this.movementInput.moveStrafe *= 0.2F;
             this.movementInput.moveForward *= 0.2F;
             this.sprintToggleTimer = 0;
         }
 
-        this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ + (double)this.width * 0.35D);
-        this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ - (double)this.width * 0.35D);
-        this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ - (double)this.width * 0.35D);
-        this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ + (double)this.width * 0.35D);
-        boolean flag3 = (float)this.getFoodStats().getFoodLevel() > 6.0F || this.capabilities.allowFlying;
+        this.pushOutOfBlocks(this.posX - (double) this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ + (double) this.width * 0.35D);
+        this.pushOutOfBlocks(this.posX - (double) this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ - (double) this.width * 0.35D);
+        this.pushOutOfBlocks(this.posX + (double) this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ - (double) this.width * 0.35D);
+        this.pushOutOfBlocks(this.posX + (double) this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ + (double) this.width * 0.35D);
+        boolean flag3 = (float) this.getFoodStats().getFoodLevel() > 6.0F || this.capabilities.allowFlying;
 
-        if (this.onGround && !flag1 && !flag2 && this.movementInput.moveForward >= f && !this.isSprinting() && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness))
-        {
-            if (this.sprintToggleTimer <= 0 && !this.mc.gameSettings.keyBindSprint.isKeyDown())
-            {
+        if (this.onGround && !flag1 && !flag2 && this.movementInput.moveForward >= f && !this.isSprinting() && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness)) {
+            if (this.sprintToggleTimer <= 0 && !
+                    (this.mc.gameSettings.keyBindSprint.isKeyDown() || Sprint.isOn())) {
                 this.sprintToggleTimer = 7;
-            }
-            else
-            {
+            } else {
                 this.setSprinting(true);
             }
         }
 
-        if (!this.isSprinting() && this.movementInput.moveForward >= f && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness) && this.mc.gameSettings.keyBindSprint.isKeyDown())
-        {
+        if (!this.isSprinting() && this.movementInput.moveForward >= f && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness) &&
+                (this.mc.gameSettings.keyBindSprint.isKeyDown() || Sprint.isOn())) {
             this.setSprinting(true);
         }
 
-        if (this.isSprinting() && (this.movementInput.moveForward < f || this.isCollidedHorizontally || !flag3))
-        {
+        if (this.isSprinting() && (this.movementInput.moveForward < f || this.isCollidedHorizontally || !flag3)) {
             this.setSprinting(false);
         }
 
-        if (this.capabilities.allowFlying)
-        {
-            if (this.mc.playerController.isSpectatorMode())
-            {
-                if (!this.capabilities.isFlying)
-                {
+        if (this.capabilities.allowFlying) {
+            if (this.mc.playerController.isSpectatorMode()) {
+                if (!this.capabilities.isFlying) {
                     this.capabilities.isFlying = true;
                     this.sendPlayerAbilities();
                 }
-            }
-            else if (!flag && this.movementInput.jump)
-            {
-                if (this.flyToggleTimer == 0)
-                {
+            } else if (!flag && this.movementInput.jump) {
+                if (this.flyToggleTimer == 0) {
                     this.flyToggleTimer = 7;
-                }
-                else
-                {
+                } else {
                     this.capabilities.isFlying = !this.capabilities.isFlying;
                     this.sendPlayerAbilities();
                     this.flyToggleTimer = 0;
@@ -850,64 +719,47 @@ public class EntityPlayerSP extends AbstractClientPlayer
             }
         }
 
-        if (this.capabilities.isFlying && this.isCurrentViewEntity())
-        {
-            if (this.movementInput.sneak)
-            {
-                this.motionY -= (double)(this.capabilities.getFlySpeed() * 3.0F);
+        if (this.capabilities.isFlying && this.isCurrentViewEntity()) {
+            if (this.movementInput.sneak) {
+                this.motionY -= (double) (this.capabilities.getFlySpeed() * 3.0F);
             }
 
-            if (this.movementInput.jump)
-            {
-                this.motionY += (double)(this.capabilities.getFlySpeed() * 3.0F);
+            if (this.movementInput.jump) {
+                this.motionY += (double) (this.capabilities.getFlySpeed() * 3.0F);
             }
         }
 
-        if (this.isRidingHorse())
-        {
-            if (this.horseJumpPowerCounter < 0)
-            {
+        if (this.isRidingHorse()) {
+            if (this.horseJumpPowerCounter < 0) {
                 ++this.horseJumpPowerCounter;
 
-                if (this.horseJumpPowerCounter == 0)
-                {
+                if (this.horseJumpPowerCounter == 0) {
                     this.horseJumpPower = 0.0F;
                 }
             }
 
-            if (flag && !this.movementInput.jump)
-            {
+            if (flag && !this.movementInput.jump) {
                 this.horseJumpPowerCounter = -10;
                 this.sendHorseJump();
-            }
-            else if (!flag && this.movementInput.jump)
-            {
+            } else if (!flag && this.movementInput.jump) {
                 this.horseJumpPowerCounter = 0;
                 this.horseJumpPower = 0.0F;
-            }
-            else if (flag)
-            {
+            } else if (flag) {
                 ++this.horseJumpPowerCounter;
 
-                if (this.horseJumpPowerCounter < 10)
-                {
-                    this.horseJumpPower = (float)this.horseJumpPowerCounter * 0.1F;
-                }
-                else
-                {
-                    this.horseJumpPower = 0.8F + 2.0F / (float)(this.horseJumpPowerCounter - 9) * 0.1F;
+                if (this.horseJumpPowerCounter < 10) {
+                    this.horseJumpPower = (float) this.horseJumpPowerCounter * 0.1F;
+                } else {
+                    this.horseJumpPower = 0.8F + 2.0F / (float) (this.horseJumpPowerCounter - 9) * 0.1F;
                 }
             }
-        }
-        else
-        {
+        } else {
             this.horseJumpPower = 0.0F;
         }
 
         super.onLivingUpdate();
 
-        if (this.onGround && this.capabilities.isFlying && !this.mc.playerController.isSpectatorMode())
-        {
+        if (this.onGround && this.capabilities.isFlying && !this.mc.playerController.isSpectatorMode()) {
             this.capabilities.isFlying = false;
             this.sendPlayerAbilities();
         }
diff --git a/src/minecraft/net/minecraft/client/gui/GuiIngame.java b/src/minecraft/net/minecraft/client/gui/GuiIngame.java
index deb40e5..f408d14 100644
--- a/src/minecraft/net/minecraft/client/gui/GuiIngame.java
+++ b/src/minecraft/net/minecraft/client/gui/GuiIngame.java
@@ -41,8 +41,8 @@ import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.StringUtils;
 import net.minecraft.world.border.WorldBorder;
-import net.unnamed.Unnamed;
 import net.unnamed.modules.render.AntiBlind;
+import net.unnamed.camera.Cameras;
 import optifine.Config;
 import optifine.CustomColors;
 
@@ -359,7 +359,7 @@ public class GuiIngame extends Gui
         {
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             this.mc.getTextureManager().bindTexture(widgetsTexPath);
-            EntityPlayer entityplayer = (EntityPlayer) Unnamed.clientSideWorld().get().cameras().getPlayerOrSupposedToBeViewEntity();
+            EntityPlayer entityplayer = (EntityPlayer) Cameras.getPlayerOrSupposedToBeViewEntity();
             int i = sr.getScaledWidth() / 2;
             float f = this.zLevel;
             this.zLevel = -90.0F;
diff --git a/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java b/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java
index 09b0d0b..63c4470 100644
--- a/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java
+++ b/src/minecraft/net/minecraft/client/network/NetHandlerPlayClient.java
@@ -1087,6 +1087,7 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
         Explosion explosion = new Explosion(this.gameController.theWorld, (Entity)null, packetIn.getX(), packetIn.getY(), packetIn.getZ(), packetIn.getStrength(), packetIn.getAffectedBlockPositions());
         explosion.doExplosionB(true);
+        // TODO: velocity injection
         this.gameController.thePlayer.motionX += (double)packetIn.func_149149_c();
         this.gameController.thePlayer.motionY += (double)packetIn.func_149144_d();
         this.gameController.thePlayer.motionZ += (double)packetIn.func_149147_e();
diff --git a/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java b/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
index 665e02d..12fe2b5 100644
--- a/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
+++ b/src/minecraft/net/minecraft/client/renderer/EntityRenderer.java
@@ -53,6 +53,7 @@ import net.unnamed.event.EventBus;
 import net.unnamed.event.vanilla.Render3DEvent;
 import net.unnamed.modules.render.AntiBlind;
 import net.unnamed.modules.render.NoHurtVibration;
+import net.unnamed.camera.Cameras;
 import optifine.*;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -73,7 +74,6 @@ import java.util.Date;
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
-import java.util.function.Predicate;
 
 public class EntityRenderer implements IResourceManagerReloadListener
 {
@@ -442,7 +442,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
     {
         Entity entity =
                 Unnamed.clientSideWorld().isDefined() ?
-                Unnamed.clientSideWorld().get().cameras().getPlayerOrSupposedToBeViewEntity() :
+                Cameras.getPlayerOrSupposedToBeViewEntity() :
                         mc.getRenderViewEntity();
 
         if (entity != null && this.mc.theWorld != null)
@@ -1296,8 +1296,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 f2 = this.smoothCamFilterX * f4;
                 f3 = this.smoothCamFilterY * f4;
 
-                Unnamed.clientSideWorld().get()
-                        .cameras().activeCamera()
+                Cameras.activeCamera()
                         .getOrElse(() -> (EntityPlayer)mc.thePlayer).setAngles(f2, f3 * (float) b0);
             }
             else
@@ -1305,8 +1304,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 this.smoothCamYaw = 0.0F;
                 this.smoothCamPitch = 0.0F;
 
-                Unnamed.clientSideWorld().get()
-                        .cameras().activeCamera()
+                Cameras.activeCamera()
                         .getOrElse(() -> (EntityPlayer)mc.thePlayer).setAngles(f2, f3 * (float) b0);
             }
         }
@@ -1447,7 +1445,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
         }
         else
         {
-            Entity entity = Unnamed.clientSideWorld().get().cameras().getPlayerOrSupposedToBeViewEntity();
+            Entity entity = Cameras.getPlayerOrSupposedToBeViewEntity();
             boolean flag = entity instanceof EntityPlayer && !this.mc.gameSettings.hideGUI;
 
             if (flag && !((EntityPlayer)entity).capabilities.allowEdit)
@@ -1579,7 +1577,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
             Shaders.setCamera(partialTicks);
         }
 
-        ActiveRenderInfo.updateRenderInfo(Unnamed.clientSideWorld().get().cameras().activeCamera().getOrElse(() -> mc.thePlayer) , this.mc.gameSettings.thirdPersonView == 2);
+        ActiveRenderInfo.updateRenderInfo(Cameras.activeCamera().getOrElse(() -> mc.thePlayer) , this.mc.gameSettings.thirdPersonView == 2);
         this.mc.mcProfiler.endStartSection("frustum");
         ClippingHelperImpl.getInstance();
         this.mc.mcProfiler.endStartSection("culling");
diff --git a/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java b/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
index 34e0e31..d14137e 100644
--- a/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
+++ b/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
@@ -90,9 +90,8 @@ import net.minecraft.world.IWorldAccess;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.Chunk;
-import net.unnamed.Unnamed;
 import net.unnamed.world.ClientSideWorld;
-import net.unnamed.world.inputcontrol.Cameras;
+import net.unnamed.camera.Cameras;
 import optifine.ChunkUtils;
 import optifine.CloudRenderer;
 import optifine.Config;
@@ -785,7 +784,7 @@ public class RenderGlobal implements IWorldAccess, IResourceManagerReloadListene
 
                                 boolean flag6 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
 
-                                if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag6 || (Unnamed.clientSideWorld().get().cameras().activeCamera().isDefined() && entity == mc.thePlayer))
+                                if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag6 || (Cameras.activeCamera().isDefined() && entity == mc.thePlayer))
                                         && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(new BlockPos(entity2))) && !ClientSideWorld.isClientSideEntity(entity2))
                                 {
 
diff --git a/src/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java b/src/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java
index 633ffc8..e9d4f48 100644
--- a/src/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java
+++ b/src/minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer.entity;
 
-import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.AbstractClientPlayer;
 import net.minecraft.client.entity.EntityPlayerSP;
 import net.minecraft.client.model.ModelPlayer;
@@ -18,7 +17,7 @@ import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScoreObjective;
 import net.minecraft.scoreboard.Scoreboard;
 import net.minecraft.util.ResourceLocation;
-import net.unnamed.Unnamed;
+import net.unnamed.camera.Cameras;
 
 public class RenderPlayer extends RendererLivingEntity<AbstractClientPlayer>
 {
@@ -57,7 +56,7 @@ public class RenderPlayer extends RendererLivingEntity<AbstractClientPlayer>
     {
 
         if (!entity.isUser() || this.renderManager.livingPlayer == entity ||
-                (Unnamed.clientSideWorld().get().cameras().shouldRenderThePlayer(partialTicks)))
+                (Cameras.shouldRenderThePlayer(partialTicks)))
         {
             double d0 = y;
 
diff --git a/src/minecraft/net/minecraft/entity/Entity.java b/src/minecraft/net/minecraft/entity/Entity.java
index 57ef1da..af79983 100644
--- a/src/minecraft/net/minecraft/entity/Entity.java
+++ b/src/minecraft/net/minecraft/entity/Entity.java
@@ -12,6 +12,7 @@ import net.minecraft.block.BlockWall;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.block.state.pattern.BlockPattern;
+import net.minecraft.client.Minecraft;
 import net.minecraft.command.CommandResultStats;
 import net.minecraft.command.ICommandSender;
 import net.minecraft.crash.CrashReport;
@@ -587,141 +588,144 @@ public abstract class Entity implements ICommandSender
     /**
      * Tries to moves the entity by the passed in displacement. Args: x, y, z
      */
-    public void moveEntity(double x, double y, double z)
+    public void moveEntity(double actualOffsetX,
+                           double actualOffsetY,
+                           double actualOffsetZ)
+    // why the fuck would you reassign a fucking parameter
     {
         if (this.noClip)
         {
-            this.setEntityBoundingBox(this.getEntityBoundingBox().offset(x, y, z));
+            this.setEntityBoundingBox(this.getEntityBoundingBox().offset(actualOffsetX, actualOffsetY, actualOffsetZ));
             this.resetPositionToBB();
         }
         else
         {
             this.worldObj.theProfiler.startSection("move");
-            double d0 = this.posX;
-            double d1 = this.posY;
-            double d2 = this.posZ;
+            double posX = this.posX;
+            double posY = this.posY;
+            double posZ = this.posZ;
 
             if (this.isInWeb)
             {
                 this.isInWeb = false;
-                x *= 0.25D;
-                y *= 0.05000000074505806D;
-                z *= 0.25D;
+                actualOffsetX *= 0.25D;
+                actualOffsetY *= 0.05000000074505806D;
+                actualOffsetZ *= 0.25D;
                 this.motionX = 0.0D;
                 this.motionY = 0.0D;
                 this.motionZ = 0.0D;
             }
 
-            double d3 = x;
-            double d4 = y;
-            double d5 = z;
-            boolean flag = this.onGround && this.isSneaking() && this instanceof EntityPlayer;
+            double uncollidedOffsetXSneakingProcessed = actualOffsetX;
+            double uncollidedOffsetYSneakingProcessed = actualOffsetY;
+            double uncollidedOffsetZSneakingProcessed = actualOffsetZ;
+            boolean sneakingLogic = this.onGround && this.isSneaking() && this instanceof EntityPlayer;
 
-            if (flag)
+            if (sneakingLogic)
             {
                 double d6;
 
-                for (d6 = 0.05D; x != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().offset(x, -1.0D, 0.0D)).isEmpty(); d3 = x)
+                for (d6 = 0.05D; actualOffsetX != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().offset(actualOffsetX, -1.0D, 0.0D)).isEmpty(); uncollidedOffsetXSneakingProcessed = actualOffsetX)
                 {
-                    if (x < d6 && x >= -d6)
+                    if (actualOffsetX < d6 && actualOffsetX >= -d6)
                     {
-                        x = 0.0D;
+                        actualOffsetX = 0.0D;
                     }
-                    else if (x > 0.0D)
+                    else if (actualOffsetX > 0.0D)
                     {
-                        x -= d6;
+                        actualOffsetX -= d6;
                     }
                     else
                     {
-                        x += d6;
+                        actualOffsetX += d6;
                     }
                 }
 
-                for (; z != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().offset(0.0D, -1.0D, z)).isEmpty(); d5 = z)
+                for (; actualOffsetZ != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().offset(0.0D, -1.0D, actualOffsetZ)).isEmpty(); uncollidedOffsetZSneakingProcessed = actualOffsetZ)
                 {
-                    if (z < d6 && z >= -d6)
+                    if (actualOffsetZ < d6 && actualOffsetZ >= -d6)
                     {
-                        z = 0.0D;
+                        actualOffsetZ = 0.0D;
                     }
-                    else if (z > 0.0D)
+                    else if (actualOffsetZ > 0.0D)
                     {
-                        z -= d6;
+                        actualOffsetZ -= d6;
                     }
                     else
                     {
-                        z += d6;
+                        actualOffsetZ += d6;
                     }
                 }
 
-                for (; x != 0.0D && z != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().offset(x, -1.0D, z)).isEmpty(); d5 = z)
+                for (; actualOffsetX != 0.0D && actualOffsetZ != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().offset(actualOffsetX, -1.0D, actualOffsetZ)).isEmpty(); uncollidedOffsetZSneakingProcessed = actualOffsetZ)
                 {
-                    if (x < d6 && x >= -d6)
+                    if (actualOffsetX < d6 && actualOffsetX >= -d6)
                     {
-                        x = 0.0D;
+                        actualOffsetX = 0.0D;
                     }
-                    else if (x > 0.0D)
+                    else if (actualOffsetX > 0.0D)
                     {
-                        x -= d6;
+                        actualOffsetX -= d6;
                     }
                     else
                     {
-                        x += d6;
+                        actualOffsetX += d6;
                     }
 
-                    d3 = x;
+                    uncollidedOffsetXSneakingProcessed = actualOffsetX;
 
-                    if (z < d6 && z >= -d6)
+                    if (actualOffsetZ < d6 && actualOffsetZ >= -d6)
                     {
-                        z = 0.0D;
+                        actualOffsetZ = 0.0D;
                     }
-                    else if (z > 0.0D)
+                    else if (actualOffsetZ > 0.0D)
                     {
-                        z -= d6;
+                        actualOffsetZ -= d6;
                     }
                     else
                     {
-                        z += d6;
+                        actualOffsetZ += d6;
                     }
                 }
             }
 
-            List<AxisAlignedBB> list1 = this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().addCoord(x, y, z));
+            List<AxisAlignedBB> allBox = this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().addCoord(actualOffsetX, actualOffsetY, actualOffsetZ));
             AxisAlignedBB axisalignedbb = this.getEntityBoundingBox();
 
-            for (AxisAlignedBB axisalignedbb1 : list1)
+            for (AxisAlignedBB axisalignedbb1 : allBox)
             {
-                y = axisalignedbb1.calculateYOffset(this.getEntityBoundingBox(), y);
+                actualOffsetY = axisalignedbb1.calculateYOffset(this.getEntityBoundingBox(), actualOffsetY);
             }
 
-            this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, y, 0.0D));
-            boolean flag1 = this.onGround || d4 != y && d4 < 0.0D;
+            this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, actualOffsetY, 0.0D));
+            boolean flag1 = this.onGround || uncollidedOffsetYSneakingProcessed != actualOffsetY && uncollidedOffsetYSneakingProcessed < 0.0D;
 
-            for (AxisAlignedBB axisalignedbb2 : list1)
+            for (AxisAlignedBB axisalignedbb2 : allBox)
             {
-                x = axisalignedbb2.calculateXOffset(this.getEntityBoundingBox(), x);
+                actualOffsetX = axisalignedbb2.calculateXOffset(this.getEntityBoundingBox(), actualOffsetX);
             }
 
-            this.setEntityBoundingBox(this.getEntityBoundingBox().offset(x, 0.0D, 0.0D));
+            this.setEntityBoundingBox(this.getEntityBoundingBox().offset(actualOffsetX, 0.0D, 0.0D));
 
-            for (AxisAlignedBB axisalignedbb13 : list1)
+            for (AxisAlignedBB axisalignedbb13 : allBox)
             {
-                z = axisalignedbb13.calculateZOffset(this.getEntityBoundingBox(), z);
+                actualOffsetZ = axisalignedbb13.calculateZOffset(this.getEntityBoundingBox(), actualOffsetZ);
             }
 
-            this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, 0.0D, z));
+            this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, 0.0D, actualOffsetZ));
 
-            if (this.stepHeight > 0.0F && flag1 && (d3 != x || d5 != z))
+            if (this.stepHeight > 0.0F && flag1 && (uncollidedOffsetXSneakingProcessed != actualOffsetX || uncollidedOffsetZSneakingProcessed != actualOffsetZ))
             {
-                double d11 = x;
-                double d7 = y;
-                double d8 = z;
+                double d11 = actualOffsetX;
+                double d7 = actualOffsetY;
+                double d8 = actualOffsetZ;
                 AxisAlignedBB axisalignedbb3 = this.getEntityBoundingBox();
                 this.setEntityBoundingBox(axisalignedbb);
-                y = (double)this.stepHeight;
-                List<AxisAlignedBB> list = this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().addCoord(d3, y, d5));
+                actualOffsetY = (double)this.stepHeight;
+                List<AxisAlignedBB> list = this.worldObj.getCollidingBoundingBoxes(this, this.getEntityBoundingBox().addCoord(uncollidedOffsetXSneakingProcessed, actualOffsetY, uncollidedOffsetZSneakingProcessed));
                 AxisAlignedBB axisalignedbb4 = this.getEntityBoundingBox();
-                AxisAlignedBB axisalignedbb5 = axisalignedbb4.addCoord(d3, 0.0D, d5);
-                double d9 = y;
+                AxisAlignedBB axisalignedbb5 = axisalignedbb4.addCoord(uncollidedOffsetXSneakingProcessed, 0.0D, uncollidedOffsetZSneakingProcessed);
+                double d9 = actualOffsetY;
 
                 for (AxisAlignedBB axisalignedbb6 : list)
                 {
@@ -729,7 +733,7 @@ public abstract class Entity implements ICommandSender
                 }
 
                 axisalignedbb4 = axisalignedbb4.offset(0.0D, d9, 0.0D);
-                double d15 = d3;
+                double d15 = uncollidedOffsetXSneakingProcessed;
 
                 for (AxisAlignedBB axisalignedbb7 : list)
                 {
@@ -737,7 +741,7 @@ public abstract class Entity implements ICommandSender
                 }
 
                 axisalignedbb4 = axisalignedbb4.offset(d15, 0.0D, 0.0D);
-                double d16 = d5;
+                double d16 = uncollidedOffsetZSneakingProcessed;
 
                 for (AxisAlignedBB axisalignedbb8 : list)
                 {
@@ -746,7 +750,7 @@ public abstract class Entity implements ICommandSender
 
                 axisalignedbb4 = axisalignedbb4.offset(0.0D, 0.0D, d16);
                 AxisAlignedBB axisalignedbb14 = this.getEntityBoundingBox();
-                double d17 = y;
+                double d17 = actualOffsetY;
 
                 for (AxisAlignedBB axisalignedbb9 : list)
                 {
@@ -754,7 +758,7 @@ public abstract class Entity implements ICommandSender
                 }
 
                 axisalignedbb14 = axisalignedbb14.offset(0.0D, d17, 0.0D);
-                double d18 = d3;
+                double d18 = uncollidedOffsetXSneakingProcessed;
 
                 for (AxisAlignedBB axisalignedbb10 : list)
                 {
@@ -762,7 +766,7 @@ public abstract class Entity implements ICommandSender
                 }
 
                 axisalignedbb14 = axisalignedbb14.offset(d18, 0.0D, 0.0D);
-                double d19 = d5;
+                double d19 = uncollidedOffsetZSneakingProcessed;
 
                 for (AxisAlignedBB axisalignedbb11 : list)
                 {
@@ -775,31 +779,31 @@ public abstract class Entity implements ICommandSender
 
                 if (d20 > d10)
                 {
-                    x = d15;
-                    z = d16;
-                    y = -d9;
+                    actualOffsetX = d15;
+                    actualOffsetZ = d16;
+                    actualOffsetY = -d9;
                     this.setEntityBoundingBox(axisalignedbb4);
                 }
                 else
                 {
-                    x = d18;
-                    z = d19;
-                    y = -d17;
+                    actualOffsetX = d18;
+                    actualOffsetZ = d19;
+                    actualOffsetY = -d17;
                     this.setEntityBoundingBox(axisalignedbb14);
                 }
 
                 for (AxisAlignedBB axisalignedbb12 : list)
                 {
-                    y = axisalignedbb12.calculateYOffset(this.getEntityBoundingBox(), y);
+                    actualOffsetY = axisalignedbb12.calculateYOffset(this.getEntityBoundingBox(), actualOffsetY);
                 }
 
-                this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, y, 0.0D));
+                this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, actualOffsetY, 0.0D));
 
-                if (d11 * d11 + d8 * d8 >= x * x + z * z)
+                if (d11 * d11 + d8 * d8 >= actualOffsetX * actualOffsetX + actualOffsetZ * actualOffsetZ)
                 {
-                    x = d11;
-                    y = d7;
-                    z = d8;
+                    actualOffsetX = d11;
+                    actualOffsetY = d7;
+                    actualOffsetZ = d8;
                     this.setEntityBoundingBox(axisalignedbb3);
                 }
             }
@@ -807,9 +811,10 @@ public abstract class Entity implements ICommandSender
             this.worldObj.theProfiler.endSection();
             this.worldObj.theProfiler.startSection("rest");
             this.resetPositionToBB();
-            this.isCollidedHorizontally = d3 != x || d5 != z;
-            this.isCollidedVertically = d4 != y;
-            this.onGround = this.isCollidedVertically && d4 < 0.0D;
+            this.isCollidedHorizontally = uncollidedOffsetXSneakingProcessed != actualOffsetX
+                    || uncollidedOffsetZSneakingProcessed != actualOffsetZ;
+            this.isCollidedVertically = uncollidedOffsetYSneakingProcessed != actualOffsetY;
+            this.onGround = this.isCollidedVertically && uncollidedOffsetYSneakingProcessed < 0.0D;
             this.isCollided = this.isCollidedHorizontally || this.isCollidedVertically;
             int i = MathHelper.floor_double(this.posX);
             int j = MathHelper.floor_double(this.posY - 0.20000000298023224D);
@@ -828,28 +833,28 @@ public abstract class Entity implements ICommandSender
                 }
             }
 
-            this.updateFallState(y, this.onGround, block1, blockpos);
+            this.updateFallState(actualOffsetY, this.onGround, block1, blockpos);
 
-            if (d3 != x)
+            if (uncollidedOffsetXSneakingProcessed != actualOffsetX)
             {
                 this.motionX = 0.0D;
             }
 
-            if (d5 != z)
+            if (uncollidedOffsetZSneakingProcessed != actualOffsetZ)
             {
                 this.motionZ = 0.0D;
             }
 
-            if (d4 != y)
+            if (uncollidedOffsetYSneakingProcessed != actualOffsetY)
             {
                 block1.onLanded(this.worldObj, this);
             }
 
-            if (this.canTriggerWalking() && !flag && this.ridingEntity == null)
+            if (this.canTriggerWalking() && !sneakingLogic && this.ridingEntity == null)
             {
-                double d12 = this.posX - d0;
-                double d13 = this.posY - d1;
-                double d14 = this.posZ - d2;
+                double d12 = this.posX - posX;
+                double d13 = this.posY - posY;
+                double d14 = this.posZ - posZ;
 
                 if (block1 != Blocks.ladder)
                 {
diff --git a/src/minecraft/net/minecraft/entity/EntityHanging.java b/src/minecraft/net/minecraft/entity/EntityHanging.java
index 608b5db..80bbbde 100644
--- a/src/minecraft/net/minecraft/entity/EntityHanging.java
+++ b/src/minecraft/net/minecraft/entity/EntityHanging.java
@@ -203,9 +203,9 @@ public abstract class EntityHanging extends Entity
     /**
      * Tries to moves the entity by the passed in displacement. Args: x, y, z
      */
-    public void moveEntity(double x, double y, double z)
+    public void moveEntity(double actualOffsetX, double actualOffsetY, double actualOffsetZ)
     {
-        if (!this.worldObj.isRemote && !this.isDead && x * x + y * y + z * z > 0.0D)
+        if (!this.worldObj.isRemote && !this.isDead && actualOffsetX * actualOffsetX + actualOffsetY * actualOffsetY + actualOffsetZ * actualOffsetZ > 0.0D)
         {
             this.setDead();
             this.onBroken((Entity)null);
diff --git a/src/minecraft/shadersmod/client/ShadersRender.java b/src/minecraft/shadersmod/client/ShadersRender.java
index 167a92a..9dfd438 100644
--- a/src/minecraft/shadersmod/client/ShadersRender.java
+++ b/src/minecraft/shadersmod/client/ShadersRender.java
@@ -15,7 +15,7 @@ import net.minecraft.client.renderer.culling.ICamera;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.entity.Entity;
 import net.minecraft.util.EnumWorldBlockLayer;
-import net.unnamed.Unnamed;
+import net.unnamed.camera.Cameras;
 import optifine.Reflector;
 
 import org.lwjgl.opengl.EXTFramebufferObject;
@@ -203,7 +203,7 @@ public class ShadersRender
             minecraft.mcProfiler.endStartSection("shadow camera");
             entityRenderer.setupCameraTransform(partialTicks, 2);
             Shaders.setCameraShadow(partialTicks);
-            ActiveRenderInfo.updateRenderInfo(Unnamed.clientSideWorld().get().cameras().activeCamera().getOrElse(() -> minecraft.thePlayer), minecraft.gameSettings.thirdPersonView == 2);
+            ActiveRenderInfo.updateRenderInfo(Cameras.activeCamera().getOrElse(() -> minecraft.thePlayer), minecraft.gameSettings.thirdPersonView == 2);
             Shaders.checkGLError("shadow camera");
             GL20.glDrawBuffers(Shaders.sfbDrawBuffers);
             Shaders.checkGLError("shadow drawbuffers");
