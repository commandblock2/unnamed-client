package net.unnamed.modules.exploit

import net.minecraft.network.play.client.{C00PacketKeepAlive, C02PacketUseEntity, C0FPacketConfirmTransaction}
import net.minecraft.network.play.server.S12PacketEntityVelocity
import net.minecraft.network.{INetHandler, Packet}
import net.unnamed.event.EventBus
import net.unnamed.event.unnamed.BlinkFlushEvent
import net.unnamed.event.vanilla.{AttackedEvent, PacketEvent, PlayerLivingUpdateBeginEvent}
import net.unnamed.modules.Module
import net.unnamed.settings.setting.{BoolSetting, IntegerSetting}

case object PulseBlink extends Module {
  val ticksPerFlush = new IntegerSetting(8)

  val flushOnPlayerClickInputAndHurt = new BoolSetting(true)
  val flushNextTick = new BoolSetting(false)
  val breakInterval = new IntegerSetting(4)

  override val enableOnJoin: Boolean = false

  var count = 0
  var break = 0

  var packets: List[Packet[INetHandler]] = Nil


  onEvent((event: PacketEvent) => {

    if (break == 0) {
      if (!event.clientBound) {
        packets ::= event.packet.asInstanceOf[Packet[INetHandler]]
        event.cancel()
      }
    }

    if (flushOnPlayerClickInputAndHurt.getValue
    && (event.packet.isInstanceOf[C02PacketUseEntity] ||
      (event.packet.isInstanceOf[S12PacketEntityVelocity] &&
        event.packet.asInstanceOf[S12PacketEntityVelocity].getEntityID == mc.thePlayer.getEntityId))) {
      if (flushNextTick.getValue)
        EventBus.next()((_: PlayerLivingUpdateBeginEvent) => flush())
      else
        flush()
    }
  })

  onEvent((_: PlayerLivingUpdateBeginEvent) => {
    if (break != 0)
      break -= 1
    else if (count == ticksPerFlush.getValue) {
      flush()
    }
    count += 1
  })

  override def onDisable(): Unit = {
    flush()
  }

  private def flush(): Unit = {
    // Fuck you scala
    if (break == 0) {
      val packetList = packets.reverse
      EventBus.fireEvent(BlinkFlushEvent(packetList))
      for (packet <- packetList)
        mc.getNetHandler.getNetworkManager.sendPacketNoEvent(packet)
      packets = Nil
      count = 0
      break = breakInterval.getValue
    }
  }
}
